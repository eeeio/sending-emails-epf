
&НаКлиенте
Перем ВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СКД = ОбработкаОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
			
	ИнтервалОтправкиСекунд = 200;  	
	
	//ОбъектСчет = Документы.СчетНаОплатуКлиенту.СоздатьДокумент();	
	//Префикс = "";
	//ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(ОбъектСчет, Истина, Префикс);	
	//ОбъектСчет.УстановитьНовыйНомер(Префикс);
	//ЕдиныйНомерСчета = ОбъектСчет.Номер;
	
	ШаблонТекстаПисьмаПоУмолчанию = ОбработкаОбъект.ПолучитьМакет("ШаблонТекстаПисьма").ПолучитьТекст();
	
	Если ЗначениеЗаполнено(ВидОповещения) Тогда 
		ПодготовитьПараметрыШаблона();
	КонецЕсли;      	
	
	УстановитьОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ВыполняетсяЗакрытие <> Истина Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), "Закрывать обработку рассылки без сохранения изменений?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(ВидОповещения) Тогда 
		ПодготовитьПараметрыШаблона();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура СоздатьГруппуВидОповещенияИШаблонПисьма(Команда)
	
	//Если ЗначениеЗаполнено(ВидОповещения) Тогда 
	//	Возврат;
	//КонецЕсли;
	
	Продолжение = Новый ОписаниеОповещения("ПослеУказанияУчетнойЗаписи", ЭтотОбъект);
	УчетнаяЗаписьЭП = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты");
	ПоказатьВводЗначения(Продолжение, УчетнаяЗаписьЭП, "Учетная запись для отправки писем");
	
КонецПроцедуры
&НаКлиенте
Процедура ПослеУказанияУчетнойЗаписи(УчетнаяЗаписьЭП, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьЭП) Тогда 
		Сообщить("Необходимо указать учетную запись, настроенную для отправки писем через встроенный почтовый клиент");
		Возврат;
	КонецЕсли;
	
	Продолжение = Новый ОписаниеОповещения("ПослеУказанияРолиКонтактногоЛица", ЭтотОбъект, Новый Структура("УчетнаяЗапись", УчетнаяЗаписьЭП));
	//РольКЛ = Справочники.РолиКонтактныхЛицПартнеров.НайтиПоНаименованию("Ответственный за платежи");
	РольКЛ = ПредопределенноеЗначение("Справочник.РолиКонтактныхЛицПартнеров.ПустаяСсылка");
	ПоказатьВводЗначения(Продолжение, РольКЛ, "Роль контактных лиц, которым будет производитсься рассылка");
	
КонецПроцедуры
&НаКлиенте
Процедура ПослеУказанияРолиКонтактногоЛица(РольКЛ, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("РольКонтактногоЛица", РольКЛ);
	Окончание = Новый ОписаниеОповещения("СоздатьГруппуВидОповещенияИШаблонПисьмаОкончание", ЭтотОбъект, ДополнительныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(РольКЛ) Тогда
		
		Продолжение = Новый ОписаниеОповещения("ПослеВопросаОСозданииРолиКонтактногоЛица", ЭтотОбъект, Новый Структура("Окончание", Окончание));
		ПоказатьВопрос(Продолжение, "Создать новую роль ""Ответственный за платежи""?", РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		ВыполнитьОбработкуОповещения(Окончание, ДополнительныеПараметры);
	КонецЕсли;
		
КонецПроцедуры
&НаКлиенте
Процедура ПослеВопросаОСозданииРолиКонтактногоЛица(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
		
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда  
		ДопПарам = ДополнительныеПараметры.Окончание.ДополнительныеПараметры;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Окончание, ДопПарам);
		
	Иначе		
		ДопПарам = ДополнительныеПараметры.Окончание.ДополнительныеПараметры;
		ДопПарам.Вставить("РольКонтактногоЛица", СоздатьНовуюРольКонтактногоЛица());
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Окончание, ДопПарам);
	КонецЕсли;	
		
КонецПроцедуры
&НаКлиенте
Процедура СоздатьГруппуВидОповещенияИШаблонПисьмаОкончание(ВыбранныеПараметры, ДополнительныеПараметры) Экспорт
	
	ВыбранныеПараметры.Вставить("ШаблонТекстаПисьма", ШаблонТекстаПисьмаПоУмолчанию);
	
	ВидОповещения = СоздатьГруппуВидОповещенияИШаблонПисьмаНаСервере(ВыбранныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПисьмаНаСервере()
		
	Если НЕ ПодготовитьПараметрыШаблона() Тогда 
		Возврат;
	КонецЕсли;
	
	МодульОбъекта 			= РеквизитФормыВЗначение("Объект");
	ПараметрыРассылки 		= Новый Структура;
	ПараметрыРассылки.Вставить("ДополнительнаяИнформация", 	ДополнительнаяИнформация);   	
	
	МодульОбъекта.ПодготовитьПисьмаКОтправке(ПараметрыШаблона, ПараметрыРассылки, СписокРассылки); 
	
	ОбновитьСписокПодготовленныхПисем();
	
КонецПроцедуры
&НаКлиенте
Процедура ПодготовитьПисьма(Команда)
	
	Если НЕ ЗначениеЗаполнено(ВидОповещения) Тогда 
		Сообщить("Укажите вид оповещения в настройках обработки");
		Возврат;
	КонецЕсли;
	
	ПодготовитьПисьмаНаСервере();
	
	//ПоказатьПредупреждение(, "Обработка завершена");
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗадолженностьНаСервере()

	Если НЕ ПодготовитьПараметрыШаблона() Тогда 
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СКД = ОбработкаОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");	
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ОбработкаОбъект.ВключитьОтборПоСегментуПартнеровВСКД(НастройкиКомпоновки);
	
	ОбработкаОбъект.РаспаковкаТекстаЗапроса(СКД);
		
	СписокРассылки.Очистить();
	
	ДеревоРезультат = Новый ДеревоЗначений;
	СтруктураПараметров = Новый Структура;
	ОбработкаОбъект.ПолучитьДанныеНаОснованииСКД(СКД, ДеревоРезультат, НастройкиКомпоновки, СтруктураПараметров);
	
	тзКонтактныеЛица = ПолучитьКонтактныхЛицПартнеров(ДеревоРезультат.Строки.ВыгрузитьКолонку("Партнер"));
		
	КоличествоСтрокОтчета = 0;
	Для Каждого иСтрока1 Из ДеревоРезультат.Строки Цикл
		
		Если КоличествоСтрокОтчета >= 999 Тогда 
			Сообщить("Количество строк превышает 1000 - таблица обрезана!");
			Прервать;
		КонецЕсли;
		КоличествоСтрокОтчета = КоличествоСтрокОтчета + 1;
		
		НоваяСтрока = СписокРассылки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, иСтрока1);
		
		НоваяСтрока.НомерСтроки = КоличествоСтрокОтчета;				
		
		Контакт = тзКонтактныеЛица.НайтиСтроки(Новый Структура("Партнер", НоваяСтрока.Партнер));
		Если Контакт.Количество() >0 Тогда 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Контакт[0]);
		КонецЕсли;
		
		НоваяСтрока.Пометка 	= (НоваяСтрока.Просрочено > 0 И ЗначениеЗаполнено(НоваяСтрока.EMail));		
		
		Если ЗначениеЗаполнено(НоваяСтрока.EMail) Тогда 
			СуществующееПисьмо		= НайтиПисьмо(НоваяСтрока.EMail, НоваяСтрока.Партнер, ПараметрыШаблона);  // пусть в цикле...
			НоваяСтрока.Письмо 		= СуществующееПисьмо.Ссылка;
			НоваяСтрока.Отправлено 	= (СуществующееПисьмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено);
			НоваяСтрока.Пометка		= ?(ЗначениеЗаполнено(НоваяСтрока.Письмо), Ложь, НоваяСтрока.Пометка);
		КонецЕсли;
				
		Для Каждого иСтрока2 Из иСтрока1.Строки Цикл
			
			НоваяПодстрока = НоваяСтрока.Документы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяПодстрока, иСтрока2);   			
			
			Попытка
				НоваяПодстрока.СуммаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяПодстрока.Регистратор, "СуммаДокумента");
			Исключение
				НоваяПодстрока.СуммаДокумента = 0;
			КонецПопытки;
			
			Если ТипЗнч(НоваяПодстрока.Регистратор) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				НоваяСтрока.НеТолькоРеализации = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НоваяПодстрока.Договор) Тогда 
				НоваяСтрока.ПустойДоговор = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьСписокПодготовленныхПисем();
	
КонецПроцедуры
&НаКлиенте
Процедура ПолучитьЗадолженность(Команда)
	
	Если НЕ ЗначениеЗаполнено(ВидОповещения) Тогда
		Сообщить("Укажите вид оповещения в настройках обработки");
		Возврат;
	КонецЕсли;
	
	ПолучитьЗадолженностьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмаНаСервере(Знач ВыделенныеСтроки = Неопределено)
	
	мсвПисьма = Новый Массив;
	
	Если ВыделенныеСтроки = Неопределено Тогда 
		мсвПисьма = ПодготовленныеПисьма.ВыгрузитьЗначения();
	Иначе
		мсвПисьма = ВыделенныеСтроки;
	КонецЕсли;
	
	МодульОбъекта = РеквизитФормыВЗначение("Объект");
	МодульОбъекта.ОтправитьПисьма(мсвПисьма, ДатаОтправкиПервогоПисьма, ИнтервалОтправкиСекунд);
	
	УстановитьВидимостьДоступность();
	
	Элементы.СписокПисем.Обновить();
	
КонецПроцедуры
&НаКлиенте
Процедура ОтправитьПисьма(Команда)
	
	Если Элементы.СписокПисем.ВыделенныеСтроки.Количество() < 2 Тогда 
		ОтправитьПисьмаНаСервере();
	Иначе
		ОтправитьПисьмаНаСервере(Элементы.СписокПисем.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиИнвертироватьПометки(Команда)
	
	Для Каждого СтрокаТаблицы Из СписокРассылки Цикл
		СтрокаТаблицы.Пометка = Не СтрокаТаблицы.Пометка;
	КонецЦикла;		
	
КонецПроцедуры
&НаКлиенте
Процедура СписокРассылкиОтменитьПометки(Команда)
	
	Если Элементы.СписокРассылки.ВыделенныеСтроки.Количество() < 2 Тогда 
		Для Каждого СтрокаТаблицы Из СписокРассылки Цикл
			СтрокаТаблицы.Пометка = Ложь;
		КонецЦикла;
	Иначе
		Для Каждого ид Из Элементы.СписокРассылки.ВыделенныеСтроки Цикл
			СтрокаТЗ = СписокРассылки.НайтиПоИдентификатору(ид);
			СтрокаТЗ.Пометка = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры   
&НаКлиенте
Процедура СписокРассылкиПометитьВсе(Команда)
	
	Если Элементы.СписокРассылки.ВыделенныеСтроки.Количество() < 2 Тогда 
		Для Каждого СтрокаТаблицы Из СписокРассылки Цикл
			СтрокаТаблицы.Пометка = Истина;
		КонецЦикла;
	Иначе
		Для Каждого ид Из Элементы.СписокРассылки.ВыделенныеСтроки Цикл
			СтрокаТЗ = СписокРассылки.НайтиПоИдентификатору(ид);
			СтрокаТЗ.Пометка = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПисемВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Если поле = "есть вложения" тогда открыть файл-вложение
	// ...
	
КонецПроцедуры
  
&НаКлиенте
Процедура ВидОповещенияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ВидОповещения) Тогда 
		ВидОповещенияПриИзмененииНаСервере();
	Иначе
		ПараметрыШаблона = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ВидОповещенияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(ВидОповещения) Тогда 
		ПодготовитьПараметрыШаблона(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРассылкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.ТолькоПросмотр Тогда 
		СтандартнаяОбработка = Ложь;
		СтрокаТЗ = СписокРассылки.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если СтрокаТЗ.ТекстПисьмаИзменен Тогда
			СформироватьСодержаниеБудущегоПисьма(ВыбраннаяСтрока);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.Письмо) Тогда
			ПоказатьЗначение(, СтрокаТЗ.Письмо);
		Иначе
			СформироватьСодержаниеБудущегоПисьма(ВыбраннаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры    
&НаКлиенте
Процедура СписокРассылкиКонтактноеЛицоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СписокРассылки.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СписокРассылкиКонтактноеЛицоПриИзмененииНаСервере(ТекущаяСтрока);	
	
КонецПроцедуры
&НаКлиенте
Процедура СписокРассылкиEmailПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокРассылки.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.EMail) И НЕ ЗначениеЗаполнено(ТекДанные.Письмо) Тогда 
		СуществующееПисьмо		= НайтиПисьмо(ТекДанные.EMail, ТекДанные.Партнер, ПараметрыШаблона);  
		ТекДанные.Письмо 		= СуществующееПисьмо.Ссылка;
		ТекДанные.Отправлено 	= (СуществующееПисьмо.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено"));
		ТекДанные.Пометка		= ?(ЗначениеЗаполнено(ТекДанные.Письмо), Ложь, ТекДанные.Пометка);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СписокРассылкиТекстПисьмаИзмененПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокРассылки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ТекстПисьмаИзменен Тогда 
		Если ТекстПисьмаФорматированныйДокумент.Элементы.Количество() = 0 Тогда 
			//Сообщить("а текст-то пустой!");
			СформироватьСодержаниеБудущегоПисьма(Элементы.СписокРассылки.ТекущаяСтрока);
		КонецЕсли;
		ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекДанные.ТекстПисьма, Новый Структура);
	Иначе
		ТекДанные.ТекстПисьма = Неопределено;
		СформироватьСодержаниеБудущегоПисьма(Элементы.СписокРассылки.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СписокРассылкиПриАктивизацииСтроки(Элемент)
	
	ТабличныйДокументВложение = Неопределено;
	ТекстПисьмаФорматированныйДокумент = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаФорматированныйДокументПриИзменении(Элемент)
		
	ТекДанные = Элементы.СписокРассылки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекДанные.ТекстПисьма, Новый Структура);
	ТекДанные.ТекстПисьмаИзменен = Истина;
	ПоказатьПредупреждение(, "Корректировка записана", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныеСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаПисьма Тогда 
		ПодключитьОбработчикОжидания("ОбновитьТекущуюДату", 30);
	//Иначе
	//	ОтключитьОбработчикОжидания("ОбновитьТекущуюДату");
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаДокументы Тогда 
		ОбновитьСостояниеОтправкиПоСтрокамЗадолженности();
		ПодключитьОбработчикОжидания("ОбновитьСостояниеОтправкиПоСтрокамЗадолженности", 30);
	//Иначе
	//	ОтключитьОбработчикОжидания("ОбновитьСостояниеОтправкиПоСтрокамЗадолженности");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПодготовитьПараметрыШаблона(ОбновитьПараметры = Ложь)
	
	Если НЕ ЗначениеЗаполнено(ВидОповещения) Тогда 
		Сообщить("Укажите вид оповещения в настройках обработки");
		Возврат Ложь;
	КонецЕсли;
	
	ГруппаРассылокИОповещений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОповещения, "ГруппаРассылокИОповещений");
	Если НЕ ЗначениеЗаполнено(ВидОповещения.ГруппаРассылокИОповещений) Тогда 
		Сообщить("Укажите группу в выбранном в настройках виде оповещения");
		Возврат Ложь;
	КонецЕсли;
	
	УчетнаяЗапись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаРассылокИОповещений, "УчетнаяЗапись");
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда 
		Сообщить("Укажите учетную запись в группе выбранного вида оповещения");
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбновитьПараметры ИЛИ НЕ ЗначениеЗаполнено(ПараметрыШаблона) Тогда 
		ПараметрыШаблона 		= ШаблоныСообщенийСлужебный.ПараметрыШаблона(ВидОповещения.ШаблонЭлектронногоПисьма);       	
		ПараметрыШаблона.Текст 	= ?(ЗначениеЗаполнено(ПараметрыШаблона.Текст), ПараметрыШаблона.Текст, ШаблонТекстаПисьмаПоУмолчанию);
		
		ПараметрыШаблона.Вставить("УчетнаяЗапись", 				УчетнаяЗапись);
		ПараметрыШаблона.Вставить("УникальныйИдентификатор", 	УникальныйИдентификатор);
	КонецЕсли;			
	
	УстановитьВидимостьДоступность();
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьГруппуВидОповещенияИШаблонПисьмаНаСервере(ВыбранныеЗначения)	
		
	НаименованиеВидаОповещений = "Счет на оплату просроченной задолженности (служебный)";
	
	НайденныйВидОповещений 		= Справочники.ВидыОповещенийКлиентам.НайтиПоНаименованию(НаименованиеВидаОповещений);
	НайденныйШаблонОповещения	= Справочники.ШаблоныСообщений.НайтиПоНаименованию(НаименованиеВидаОповещений);
	НайденнаяГруппаОповещений	= Справочники.ГруппыРассылокИОповещений.НайтиПоНаименованию(НаименованиеВидаОповещений);
	
	//Если ЗначениеЗаполнено(НайденныйВидОповещений) Тогда 
	//	Сообщить("Нужный вид оповещений уже существует.");
	//	Возврат НайденныйВидОповещений;
	//КонецЕсли;
	
	Отказ = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(НайденныйШаблонОповещения) Тогда 
			НоваяГруппаОповещений 	= НайденнаяГруппаОповещений.ПолучитьОбъект();	
		Иначе
			НоваяГруппаОповещений 	= Справочники.ГруппыРассылокИОповещений.СоздатьЭлемент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяГруппаОповещений, ВыбранныеЗначения);

		НоваяГруппаОповещений.Наименование										= НаименованиеВидаОповещений;
		НоваяГруппаОповещений.Принудительная 									= Истина;  	
		//НоваяГруппаОповещений.УчетнаяЗапись 									= ВыбранныеЗначения.УчетнаяЗапись; // Справочник.УчетныеЗаписиЭлектроннойПочты	
		НоваяГруппаОповещений.СрокХраненияСообщений 							= 3;
		НоваяГруппаОповещений.ПредназначенаДляЭлектронныхПисем 					= Истина;
		НоваяГруппаОповещений.ПредназначенаДляSMS 								= Ложь;
		//Если ИспользоватьРолиКонтактныхЛицПартнеров Тогда 
			НоваяГруппаОповещений.ОтправлятьКонтактнымЛицамРоли 					= Истина;
			//НоваяГруппаОповещений.РольКонтактногоЛица 							= ВыбранныеЗначения.РольКонтактногоЛица;
			НоваяГруппаОповещений.ВидКонтактнойИнформацииКонтактногоЛицаДляПисем 	= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		//Иначе
			НоваяГруппаОповещений.ОтправлятьПартнеру 								= Ложь;
			НоваяГруппаОповещений.ВидКонтактнойИнформацииПартнераДляПисем 			= Справочники.ВидыКонтактнойИнформации.EmailПартнера; // на всякий случай
			НоваяГруппаОповещений.Ответственный 									= Пользователи.ТекущийПользователь();
		//КонецЕсли;
		
		НоваяГруппаОповещений.Записать();
		
		//Если ИспользоватьШаблоныСообщений Тогда 
			Если ЗначениеЗаполнено(НайденныйШаблонОповещения) Тогда 
				НовыйШаблонОповещения 	= НайденныйШаблонОповещения.ПолучитьОбъект();	
			Иначе
				НовыйШаблонОповещения 	= Справочники.ШаблоныСообщений.СоздатьЭлемент();
			КонецЕсли;
			
			НовыйШаблонОповещения.Наименование 								= НаименованиеВидаОповещений;
			//НовыйШаблонОповещения.Автор		 							= Пользователи.ТекущийПользователь();
			НовыйШаблонОповещения.Назначение 								= "Оповещение клиента ""Выявление просроченной задолженности""";
			НовыйШаблонОповещения.ПолноеИмяТипаПараметраВводаНаОсновании 	= "ПросроченнаяЗадолженность";
			НовыйШаблонОповещения.ПредназначенДляВводаНаОсновании		 	= Ложь;
			НовыйШаблонОповещения.ПредназначенДляЭлектронныхПисем		 	= Истина;
			НовыйШаблонОповещения.ТранслитерироватьИменаФайлов		 		= Истина;
			НовыйШаблонОповещения.ТипТекстаПисьма		 					= ?(ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML") = Истина, 
																				Перечисления.СпособыРедактированияЭлектронныхПисем.HTML, 
																				Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
			
		    ЧтениеHTML = Новый ЧтениеHTML;
		    ЧтениеHTML.УстановитьСтроку(ВыбранныеЗначения.ШаблонТекстаПисьма); 		    
		    ПостроительDOM = Новый ПостроительDOM;
		    ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
		    ТекстПисьма = ДокументHTML.Тело.ТекстовоеСодержимое;
			
			НовыйШаблонОповещения.ТекстШаблонаПисьмаHTML 	= ВыбранныеЗначения.ШаблонТекстаПисьма;
			НовыйШаблонОповещения.ТекстШаблонаПисьма 		= ДокументHTML.Тело.ТекстовоеСодержимое;
			
			СписокФорматов = Новый СписокЗначений;
			СписокФорматов.Добавить(ТипФайлаТабличногоДокумента.PDF, "Документ Adobe PDF (.pdf)", Истина);
			НовыйШаблонОповещения.ФорматВложений = Новый ХранилищеЗначения(СписокФорматов);
						
			НовыйШаблонОповещения.ТемаПисьма	= "Счет на оплату просроченной задолженности";
			
			ИмяПараметраСчет 					= "СчетНаОплату";
			
			НовыйШаблонОповещения.Параметры.Очистить();
			
			НовПараметр 						= НовыйШаблонОповещения.Параметры.Добавить();
			НовПараметр.ИмяПараметра 			= ИмяПараметраСчет; 
			НовПараметр.ТипПараметра 			= Новый ХранилищеЗначения(Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуКлиенту"));
			НовПараметр.ПредставлениеПараметра 	= "Счет на оплату клиенту"; 
			НовПараметр 						= НовыйШаблонОповещения.Параметры.Добавить();
			НовПараметр.ИмяПараметра 			= "Организация"; 
			НовПараметр.ТипПараметра 			= Новый ХранилищеЗначения(Новый ОписаниеТипов("Строка"));
			НовПараметр.ПредставлениеПараметра 	= "Организация"; 
			НовПараметр 						= НовыйШаблонОповещения.Параметры.Добавить();
			НовПараметр.ИмяПараметра 			= "Партнер"; 
			НовПараметр.ТипПараметра 			= Новый ХранилищеЗначения(Новый ОписаниеТипов("Строка"));
			НовПараметр.ПредставлениеПараметра 	= "Партнер"; 
			НовПараметр 						= НовыйШаблонОповещения.Параметры.Добавить();
			НовПараметр.ИмяПараметра 			= "Руководитель"; 
			НовПараметр.ТипПараметра 			= Новый ХранилищеЗначения(Новый ОписаниеТипов("Строка"));
			НовПараметр.ПредставлениеПараметра 	= "Руководитель"; 
			НовПараметр 						= НовыйШаблонОповещения.Параметры.Добавить();
			НовПараметр.ИмяПараметра 			= "ДолжностьРуководителя"; 
			НовПараметр.ТипПараметра 			= Новый ХранилищеЗначения(Новый ОписаниеТипов("Строка"));
			НовПараметр.ПредставлениеПараметра 	= "Должность руководителя"; 
			НовПараметр 						= НовыйШаблонОповещения.Параметры.Добавить();
			НовПараметр.ИмяПараметра 			= "ДолжностьРуководителя"; 
			НовПараметр.ТипПараметра 			= Новый ХранилищеЗначения(Новый ОписаниеТипов("Строка"));
			НовПараметр.ПредставлениеПараметра 	= "Должность руководителя"; 
			НовПараметр 						= НовыйШаблонОповещения.Параметры.Добавить();
			НовПараметр.ИмяПараметра 			= "ДополнительнаяИнформация"; 
			НовПараметр.ТипПараметра 			= Новый ХранилищеЗначения(Новый ОписаниеТипов("Строка"));
			НовПараметр.ПредставлениеПараметра 	= "Дополнительная информация"; 
			НовПараметр 						= НовыйШаблонОповещения.Параметры.Добавить();
			НовПараметр.ИмяПараметра 			= "СуммаДолгаИтого"; 
			НовПараметр.ТипПараметра 			= Новый ХранилищеЗначения(Новый ОписаниеТипов("Строка"));
			НовПараметр.ПредставлениеПараметра 	= "Сумма долга (итого)"; 
			НовПараметр 						= НовыйШаблонОповещения.Параметры.Добавить();
			НовПараметр.ИмяПараметра 			= "СуммаПросроченоИтого"; 
			НовПараметр.ТипПараметра 			= Новый ХранилищеЗначения(Новый ОписаниеТипов("Строка"));
			НовПараметр.ПредставлениеПараметра 	= "Сумма просрочено (итого)"; 
			НовПараметр 						= НовыйШаблонОповещения.Параметры.Добавить();
			НовПараметр.ИмяПараметра 			= "ДокументОснование"; 
			НовПараметр.ТипПараметра 			= Новый ХранилищеЗначения(Новый ОписаниеТипов("Строка"));
			НовПараметр.ПредставлениеПараметра 	= "Документ-основание"; 
			НовПараметр 						= НовыйШаблонОповещения.Параметры.Добавить();
			НовПараметр.ИмяПараметра 			= "ПлановаяДатаОплаты"; 
			НовПараметр.ТипПараметра 			= Новый ХранилищеЗначения(Новый ОписаниеТипов("Строка"));
			НовПараметр.ПредставлениеПараметра 	= "Плановая дата оплаты"; 
			НовПараметр 						= НовыйШаблонОповещения.Параметры.Добавить();
			НовПараметр.ИмяПараметра 			= "ПросрочкаДней"; 
			НовПараметр.ТипПараметра 			= Новый ХранилищеЗначения(Новый ОписаниеТипов("Строка"));
			НовПараметр.ПредставлениеПараметра 	= "Просрочка, дней"; 
			НовПараметр 						= НовыйШаблонОповещения.Параметры.Добавить();
			НовПараметр.ИмяПараметра 			= "СуммаДолга"; 
			НовПараметр.ТипПараметра 			= Новый ХранилищеЗначения(Новый ОписаниеТипов("Строка"));
			НовПараметр.ПредставлениеПараметра 	= "Сумма долга"; 
			НовПараметр 						= НовыйШаблонОповещения.Параметры.Добавить();
			НовПараметр.ИмяПараметра 			= "СуммаПросрочено"; 
			НовПараметр.ТипПараметра 			= Новый ХранилищеЗначения(Новый ОписаниеТипов("Строка"));
			НовПараметр.ПредставлениеПараметра 	= "Сумма просрочено"; 
			
			НовыйШаблонОповещения.ПечатныеФормыИВложения.Очистить();
			
			ПечатнаяФормаПоУмолчанию 			= ОпределитьПечатнуюФормуПоУмолчанию(ИмяПараметраСчет);
			НовВложение							= НовыйШаблонОповещения.ПечатныеФормыИВложения.Добавить();
			НовВложение.Идентификатор 			= ПечатнаяФормаПоУмолчанию.Идентификатор;
			НовВложение.Имя 					= ПечатнаяФормаПоУмолчанию.ИмяПараметра;
			
			НовыйШаблонОповещения.Записать();
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденныйВидОповещений) Тогда 
			НовыйВидОповещения 								= НайденныйВидОповещений.ПолучитьОбъект();	
		Иначе
			НовыйВидОповещения 								= Справочники.ВидыОповещенийКлиентам.СоздатьЭлемент();	
		КонецЕсли;
		НовыйВидОповещения.Наименование						= НаименованиеВидаОповещений;
		НовыйВидОповещения.ГруппаРассылокИОповещений 		= НоваяГруппаОповещений.Ссылка;
		НовыйВидОповещения.ПредназначенаДляЭлектронныхПисем = Истина;
		НовыйВидОповещения.ПредназначенаДляSMS 				= Ложь;
		НовыйВидОповещения.ШаблонЭлектронногоПисьма 		= НовыйШаблонОповещения.Ссылка;
		НовыйВидОповещения.ИспользуетсяУсловиеОтправки		= Ложь;
		НовыйВидОповещения.ТипСобытия						= Перечисления.ТипыСобытийОповещений.ПросроченнаяЗадолженность;
		НовыйВидОповещения.РегламентноеЗадание 				= Неопределено;
		НовыйВидОповещения.Комментарий 						= "Служебный объект! Ничего не изменяйте здесь! Не включайте регламентное задание!";

		НовыйВидОповещения.Записать();

		ЗафиксироватьТранзакцию();
		Возврат НовыйВидОповещения.Ссылка;
		
	Исключение
		
		ОтменитьТранзакцию();
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции
&НаСервереБезКонтекста
Функция ОпределитьПечатнуюФормуПоУмолчанию(ИмяПараметра) // это модифицированная копия процедуры ШаблоныСообщенийСлужебный.ОпределитьСписокПечатныхФорм
		
	МетаданныеОбъект = Метаданные.Документы.СчетНаОплатуКлиенту;
	
	ПечатнаяФормаПоУмолчанию = Неопределено;  	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		
		ИсточникиКомандПечати   = МодульУправлениеПечатью.ИсточникиКомандПечати();
		Если ИсточникиКомандПечати.Найти(МетаданныеОбъект) <> Неопределено Тогда
			
			КомандыПечатиОбъекта = МодульУправлениеПечатью.КомандыПечатиОбъектаДоступныеДляВложений(МетаданныеОбъект);
			ПроверкаНаДубли      = Новый Соответствие;
			
			Для каждого Вложение Из КомандыПечатиОбъекта Цикл
				Если НЕ Вложение.Отключена
					И СтрНайти(Вложение.Идентификатор, ",") = 0
					И НЕ ПустаяСтрока(Вложение.МенеджерПечати)
					И НЕ Вложение.СразуНаПринтер
					И НЕ Вложение.СкрытаФункциональнымиОпциями
					И ПроверкаНаДубли[Вложение.УникальныйИдентификатор] = Неопределено 
					
					И Вложение.Идентификатор = ИмяПараметра
					//И Вложение.ДополнительныеПараметры.ОтображатьФаксимиле 
					Тогда
					
					Если ПечатнаяФормаПоУмолчанию = Неопределено Тогда 
						ПечатнаяФормаПоУмолчанию = Новый Структура;  	
					КонецЕсли;
					
					ПечатнаяФормаПоУмолчанию.Вставить("Имя", 				Вложение.Идентификатор);
					ПечатнаяФормаПоУмолчанию.Вставить("Идентификатор", 		Вложение.УникальныйИдентификатор);
					ПечатнаяФормаПоУмолчанию.Вставить("Представление", 		Вложение.Представление);
					ПечатнаяФормаПоУмолчанию.Вставить("МенеджерПечати", 	Вложение.МенеджерПечати);
					ПечатнаяФормаПоУмолчанию.Вставить("ТипФайла", 			"MXL");
					ПечатнаяФормаПоУмолчанию.Вставить("Статус", 			"ПечатнаяФорма");
					ПечатнаяФормаПоУмолчанию.Вставить("ИмяПараметра", 		ИмяПараметра);
					ПечатнаяФормаПоУмолчанию.Вставить("ПараметрыПечати", 	Вложение.ДополнительныеПараметры);
					
					ПроверкаНаДубли.Вставить(Вложение.УникальныйИдентификатор, Истина); 						
				КонецЕсли;
			КонецЦикла; 			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПечатнаяФормаПоУмолчанию;
	
КонецФункции
&НаСервереБезКонтекста
Функция СоздатьНовуюРольКонтактногоЛица()
	
	НовРоль 				= Справочники.РолиКонтактныхЛицПартнеров.СоздатьЭлемент();
	НовРоль.Наименование 	= "Ответственный за платежи";
	//НовРоль.Описание 		= "";

	Попытка
		НовРоль.Записать();
		Возврат НовРоль.Ссылка;
	Исключение
		Возврат Справочники.РолиКонтактныхЛицПартнеров.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура СформироватьСодержаниеБудущегоПисьма(ВыбраннаяСтрока)
	
	Если НЕ ПодготовитьПараметрыШаблона() Тогда 
		Возврат;
	КонецЕсли;
	
	ТабличныйДокументВложение 			= Неопределено; // очищаем
	ТекстПисьмаФорматированныйДокумент 	= Неопределено; // очищаем
	
	//Если НЕ ЗначениеЗаполнено(ПараметрыШаблона) Тогда 
	//	ПараметрыШаблона 		= ШаблоныСообщенийСлужебный.ПараметрыШаблона(ВидОповещения.ШаблонЭлектронногоПисьма);
	//	ПараметрыШаблона.Текст 	= ?(ЗначениеЗаполнено(ПараметрыШаблона.ТекстШаблонаПисьмаHTML), ПараметрыШаблона.ТекстШаблонаПисьмаHTML, ШаблонТекстаПисьмаПоУмолчанию);
	//	ПараметрыШаблона.Вставить("УчетнаяЗаписьОтправителя", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОповещения.ГруппаРассылокИОповещений, "УчетнаяЗапись");
	//КонецЕсли;
	
	//РезультатЗаполнения = Новый Структура;
	
	РезультатЗаполнения = Новый Структура;
	РезультатЗаполнения.Вставить("Руководитель"); 					// это вернем для использования в тексте письма
	РезультатЗаполнения.Вставить("ПечатныеФормы", Новый Массив);    // сюда вставим полученные печатные формы
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("ДополнительнаяИнформация", 	ДополнительнаяИнформация);
	ПараметрыПисьма.Вставить("Результат", 					РезультатЗаполнения);
	
	СтрокаТЗ = СписокРассылки.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	//// показываем печатные формы вложений
	//СохраненныйТабДок = ?(СтрокаТЗ.ПечатнаяФорма = Неопределено, Неопределено, СтрокаТЗ.ПечатнаяФорма.Получить());    	
	//Если СохраненныйТабДок <> Неопределено Тогда 
	//	ТабличныйДокументВложение = СохраненныйТабДок;
	//	
	//Иначе
	//	//РезультатЗаполнения.Вставить("Руководитель"); // чтоб два раза ответственных не получать попытаемся добыть руководителя из счета
	МодульОбъекта 		= РеквизитФормыВЗначение("Объект");
	МодульОбъекта.СформироватьТабличныйДокументВложение(СтрокаТЗ, ПараметрыШаблона, ПараметрыПисьма);
	
	ПервыйДокумент = Истина;
	Для Каждого иТабДокумент Из РезультатЗаполнения.ПечатныеФормы Цикл
		Если НЕ ПервыйДокумент Тогда 
			ЗадатьФорматСтрок(иТабДокумент); 
		КонецЕсли;
		ТабличныйДокументВложение.Вывести(иТабДокумент);
		ТабличныйДокументВложение.ВывестиГоризонтальныйРазделительСтраниц();
		ПервыйДокумент = Ложь;
	КонецЦикла; 
	//КонецЕсли;
	
	// показываем текст будущего письма	
	Если НЕ ПустаяСтрока(СтрокаТЗ.ТекстПисьма) Тогда 
		ТекстПисьмаФорматированныйДокумент.УстановитьHTML(СтрокаТЗ.ТекстПисьма, Новый Структура); // пока без картинок   
		
	Иначе  		
		//МодульОбъекта 		= РеквизитФормыВЗначение("Объект");
		//ТекстШаблонаПисьма 	= ?(ЗначениеЗаполнено(ПараметрыШаблона.ТекстШаблонаПисьмаHTML), ПараметрыШаблона.ТекстШаблонаПисьмаHTML, ШаблонТекстаПисьмаПоУмолчанию);
		ТекстПисьмаHTML 	= МодульОбъекта.СформироватьТекстПисьма(СтрокаТЗ, ПараметрыШаблона, ПараметрыПисьма);
		
		ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ТекстПисьмаHTML, Новый Структура); // пока без картинок
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ЗадатьФорматСтрок(прТаб)
	
	лкКоличествоСтрок = прТаб.ВысотаТаблицы;
	лкКоличествоКолонок = прТаб.ШиринаТаблицы;
	лкШирина1 = "";
	лкШирина2 = "";
	лкСтрока1 = 0;
	лкСтрока2 = 0;
	
	Для лкСтр=1 По лкКоличествоСтрок Цикл
		
		лкШирина2 = "";
		Для лкКол=1 По лкКоличествоКолонок Цикл
			лкШирина2 = лкШирина2 + "," + прТаб.Область(лкСтр,лкКол).ШиринаКолонки;
		КонецЦикла; 
		Если лкШирина1 = лкШирина2 Тогда
			лкСтрока2 = лкСтрока2 + 1;
		Иначе
			Если лкСтрока1 <> 0 Тогда
				прТаб.Область(лкСтрока1,,лкСтрока2).СоздатьФорматСтрок();
			КонецЕсли;
			лкШирина1 = лкШирина2;
			лкСтрока1 = лкСтр;
			лкСтрока2 = лкСтр;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если лкСтрока1 <> 0 Тогда
		прТаб.Область(лкСтрока1,,лкСтрока2).СоздатьФорматСтрок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформление()
	
	ИспользоватьПочтовыйКлиент 				= ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент");		
	ОтправлятьПисьмаВФорматеHTML 			= ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML");
	ИспользоватьРолиКонтактныхЛицПартнеров 	= ПолучитьФункциональнуюОпцию("ИспользоватьРолиКонтактныхЛицПартнеров");
	ИспользоватьШаблоныСообщений 			= ПолучитьФункциональнуюОпцию("ИспользоватьШаблоныСообщений");	
	
	Если НЕ ИспользоватьПочтовыйКлиент Тогда 
		ТекстОшибкиОткрытия = ТекстОшибкиОткрытия + ?(ЗначениеЗаполнено(ТекстОшибкиОткрытия), Символы.ПС, "") 
		+ "Необходимо включить использование почтового клиента в настройках программы!";
		Элементы.ТекстОшибкиОткрытия.Видимость = Истина;
		ТолькоПросмотр = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользоватьРолиКонтактныхЛицПартнеров Тогда 
		ТекстОшибкиОткрытия = ТекстОшибкиОткрытия + ?(ЗначениеЗаполнено(ТекстОшибкиОткрытия), Символы.ПС, "") 
		//+ "Включите использование ролей контактных лиц партнеров, иначе будут использоваться контактные данные партнеров!";
		+ "Включите использование ролей контактных лиц партнеров!"; 
		Элементы.ТекстОшибкиОткрытия.Видимость = Истина;
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если НЕ ИспользоватьШаблоныСообщений Тогда 
		ТекстОшибкиОткрытия = ТекстОшибкиОткрытия + ?(ЗначениеЗаполнено(ТекстОшибкиОткрытия), Символы.ПС, "") 
		//+ "Включите использование шаблонов сообщений, иначе будет использоваться встроенный шаблон, который неудобно редактировать!";
		+ "Включите использование шаблонов сообщений!"; 
		Элементы.ТекстОшибкиОткрытия.Видимость = Истина;
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если НЕ ОтправлятьПисьмаВФорматеHTML Тогда 
		ТекстОшибкиОткрытия = ТекстОшибкиОткрытия + ?(ЗначениеЗаполнено(ТекстОшибкиОткрытия), Символы.ПС, "") 
		//+ "Включите использование формата HTML для писем, иначе ваши письма будут некрасивыми!";
		+ "Включите использование формата HTML для писем!";
		Элементы.ТекстОшибкиОткрытия.Видимость = Истина;
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	//Элементы.СоздатьГруппуВидОповещенияИШаблонПисьма.Видимость = 
	//	//ИспользоватьРолиКонтактныхЛицПартнеров
	//	ИспользоватьШаблоныСообщений
	//	И НЕ ЗначениеЗаполнено(ВидОповещения); 
	//	//И НЕ ЗначениеЗаполнено(Справочники.ВидыОповещенийКлиентам.НайтиПоНаименованию("Напоминание об оплате (служебный)"));
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокПисем.Дата", Элементы.СписокПисемДата.Имя);
		
КонецПроцедуры
&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	СписокПисем.Параметры.УстановитьЗначениеПараметра("ПодготовленныеПисьма", 	ПодготовленныеПисьма);
	СписокПисем.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", 			ТекущаяДата());
	//СписокПисем.Параметры.УстановитьЗначениеПараметра("Исходящее", 			Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее);
	
	Если ТипЗнч(ПараметрыШаблона) = Тип("Структура") Тогда 
		СписокПисем.Параметры.УстановитьЗначениеПараметра("Тема50", 				СокрЛП(Лев(ПараметрыШаблона.Тема, 50)));
	Иначе
		СписокПисем.Параметры.УстановитьЗначениеПараметра("Тема50", 				"");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтактныхЛицПартнеров(мсвПартнеры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка,
	|	КонтактныеЛицаПартнеров.Владелец КАК Владелец
	|ПОМЕСТИТЬ втКонтактныеЛица
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
	|	И КонтактныеЛицаПартнеров.Владелец В(&Партнеры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	ПартнерыКонтактнаяИнформация.АдресЭП КАК АдресЭП
	|ПОМЕСТИТЬ втАдресаЭППартнеров
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка В(&Партнеры)
	|	И ПартнерыКонтактнаяИнформация.Тип = &ТипЭП
	|	И ПартнерыКонтактнаяИнформация.Вид = &ВидЭППартнера
	|	И ПартнерыКонтактнаяИнформация.АдресЭП <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КонтактныеЛицаПартнеровРолиКонтактногоЛица.Ссылка КАК Ссылка,
	|	втКонтактныеЛица.Владелец КАК Партнер
	|ПОМЕСТИТЬ втОтветственныеЗаПлатежи
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.РолиКонтактногоЛица КАК КонтактныеЛицаПартнеровРолиКонтактногоЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКонтактныеЛица КАК втКонтактныеЛица
	|		ПО КонтактныеЛицаПартнеровРолиКонтактногоЛица.Ссылка = втКонтактныеЛица.Ссылка
	|ГДЕ
	|	КонтактныеЛицаПартнеровРолиКонтактногоЛица.РольКонтактногоЛица = &ОтветственныйЗаПлатежи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НЕОПРЕДЕЛЕНО,
	|	втАдресаЭППартнеров.Партнер
	|ИЗ
	|	втАдресаЭППартнеров КАК втАдресаЭППартнеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП КАК АдресЭП
	|ПОМЕСТИТЬ втАдресаЭП
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОтветственныеЗаПлатежи КАК втОтветственныеЗаПлатежи
	|		ПО КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = втОтветственныеЗаПлатежи.Ссылка
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &ТипЭП
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = &ВидЭП
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втОтветственныеЗаПлатежи.Партнер КАК Партнер,
	|	втОтветственныеЗаПлатежи.Ссылка КАК КонтактноеЛицо,
	|	МАКСИМУМ(ЕСТЬNULL(втАдресаЭП.АдресЭП, ЕСТЬNULL(втАдресаЭППартнеров.АдресЭП, """"))) КАК eMail
	|ИЗ
	|	втОтветственныеЗаПлатежи КАК втОтветственныеЗаПлатежи
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдресаЭП КАК втАдресаЭП
	|		ПО втОтветственныеЗаПлатежи.Ссылка = втАдресаЭП.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдресаЭППартнеров КАК втАдресаЭППартнеров
	|		ПО втОтветственныеЗаПлатежи.Партнер = втАдресаЭППартнеров.Партнер
	|
	|СГРУППИРОВАТЬ ПО
	|	втОтветственныеЗаПлатежи.Ссылка,
	|	втОтветственныеЗаПлатежи.Партнер";
	
	Запрос.УстановитьПараметр("Партнеры", 				мсвПартнеры);
	Запрос.УстановитьПараметр("ОтветственныйЗаПлатежи", ВидОповещения.ГруппаРассылокИОповещений.РольКонтактногоЛица);
	Запрос.УстановитьПараметр("ТипЭП", 					Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ВидЭП", 					Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
	Запрос.УстановитьПараметр("ВидЭППартнера",			Справочники.ВидыКонтактнойИнформации.EmailПартнера);
	
	тзРезультат = Запрос.Выполнить().Выгрузить();
	тзРезультат.Индексы.Добавить("Партнер");	
	
	Возврат тзРезультат;
	
КонецФункции
&НаСервереБезКонтекста
Функция НайтиПисьмо(EMail, Партнер, ПараметрыШаблона)
	
	Ответ = Новый Структура("Ссылка, ДатаКогдаОтправить, СтатусПисьма");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектронноеПисьмоИсходящее.Ссылка КАК Ссылка,
	|	ЭлектронноеПисьмоИсходящее.ДатаКогдаОтправить КАК ДатаКогдаОтправить,
	|	ЭлектронноеПисьмоИсходящее.СтатусПисьма КАК СтатусПисьма,
	|	ЭлектронноеПисьмоИсходящее.Дата КАК Дата,
	|	ЭлектронноеПисьмоИсходящее.ДатаОтправления КАК ДатаОтправления
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	|	И ПОДСТРОКА(ЭлектронноеПисьмоИсходящее.Тема, 1, 50) = &Тема50
	|	И ЭлектронноеПисьмоИсходящее.СписокПолучателейПисьма ПОДОБНО &СписокПолучателейПисьма
	|	И ЭлектронноеПисьмоИсходящее.СписокПолучателейПисьма ПОДОБНО &Партнер
	|	И ЭлектронноеПисьмоИсходящее.Дата >= &НеделюНазад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
		
	Запрос.УстановитьПараметр("Тема50", 					СокрЛП(Лев(ПараметрыШаблона.Тема, 50)));
	Запрос.УстановитьПараметр("СписокПолучателейПисьма", 	"%" + EMail + "%");
	Запрос.УстановитьПараметр("Партнер", 					"%" + Партнер + "%");
	Запрос.УстановитьПараметр("НеделюНазад", 				ТекущаяДата() - 7*24*60*60);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(Ответ, Выборка);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции
&НаСервере
Процедура СписокРассылкиКонтактноеЛицоПриИзмененииНаСервере(ТекущаяСтрока)
	
	// тут надо получить адрес электронной почты выбранного контактного лица
	СтрокаТЗ = СписокРассылки.НайтиПоИдентификатору(ТекущаяСтрока);
	
	СтрокаТЗ.EMail = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СтрокаТЗ.КонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
	
	Если ЗначениеЗаполнено(СтрокаТЗ.EMail) И НЕ ЗначениеЗаполнено(СтрокаТЗ.Письмо) Тогда 
		СуществующееПисьмо		= НайтиПисьмо(СтрокаТЗ.EMail, СтрокаТЗ.Партнер, ПараметрыШаблона);  
		СтрокаТЗ.Письмо 		= СуществующееПисьмо.Ссылка;
		СтрокаТЗ.Отправлено 	= (СуществующееПисьмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено);
		СтрокаТЗ.Пометка		= ?(ЗначениеЗаполнено(СтрокаТЗ.Письмо), Ложь, СтрокаТЗ.Пометка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущуюДату() Экспорт
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьСостояниеОтправкиПоСтрокамЗадолженности() Экспорт
	
	//Если СписокРассылки.Количество() > 0 Тогда 
	//	ОбновитьСостояниеОтправкиПоСтрокамЗадолженностиНаСервере();
	//КонецЕсли;
	
	Отправлено = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено");
	
	// пусть будет пока в цикле...
	Для Каждого СтрокаТЗ Из СписокРассылки Цикл
		Если ЗначениеЗаполнено(СтрокаТЗ.Письмо) И НЕ СтрокаТЗ.Отправлено Тогда 
			СтрокаТЗ.Отправлено = (ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(СтрокаТЗ.Письмо, "СтатусПисьма") = Отправлено);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
//&НаСервере
//Процедура ОбновитьСостояниеОтправкиПоСтрокамЗадолженностиНаСервере() Экспорт
//	
//	Отправлено = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
//	
//	// пусть будет пока в цикле...
//	Для Каждого СтрокаТЗ Из СписокРассылки Цикл
//		Если ЗначениеЗаполнено(СтрокаТЗ.Письмо) И НЕ СтрокаТЗ.Отправлено Тогда 
//			СтрокаТЗ.Отправлено = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЗ.Письмо, "СтатусПисьма") = Отправлено);
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры
&НаСервере
Процедура ОбновитьСписокПодготовленныхПисем()
	
	// обновим список созданных в этом сеансе писем
	Для Каждого СтрокаТЗ Из СписокРассылки Цикл
		Если ЗначениеЗаполнено(СтрокаТЗ.Письмо) Тогда 
			ПодготовленныеПисьма.Добавить(СтрокаТЗ.Письмо);
		КонецЕсли;
	КонецЦикла;      	
	мсв = ПодготовленныеПисьма.ВыгрузитьЗначения();
	тз = Новый ТаблицаЗначений; 
	тз.Колонки.Добавить("Письмо");
	Для Н=1 По мсв.Количество() Цикл тз.Добавить(); КонецЦикла;
	тз.ЗагрузитьКолонку(мсв, "Письмо");
	тз.Свернуть("Письмо");
	мсв = тз.ВыгрузитьКолонку("Письмо");
	ПодготовленныеПисьма.ЗагрузитьЗначения(мсв);

КонецПроцедуры

#КонецОбласти

#Область Архив

//&НаКлиенте
//Процедура СписокПисемПриАктивизацииСтроки(Элемент)
//	
//	Если Элементы.СписокПисем.ВыделенныеСтроки.Количество() > 1 Тогда 
//		НаименованиеКнопки = "Отправить выделенные";
//	Иначе
//		НаименованиеКнопки = "Отправить подготовленные";
//	КонецЕсли;
//	
//	Если СокрЛП(Элементы.ПисьмаОтправитьПисьма.Заголовок) <> НаименованиеКнопки Тогда 
//		Элементы.ПисьмаОтправитьПисьма.Заголовок = НаименованиеКнопки;
//		Сообщить(Элементы.ПисьмаОтправитьПисьма.Заголовок);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура СписокРассылкиПечатнаяФормаИзмененаПриИзменении(Элемент)
//	
//	ТекДанные = Элементы.СписокРассылки.ТекущиеДанные;
//	Если ТекДанные = Неопределено Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	Если ТекДанные.ПечатнаяФормаИзменена Тогда 
//		Если ТабличныйДокументВложение.Области.Количество() = 0 Тогда 
//			Сообщить("а форма-то пустая!");
//			СформироватьСодержаниеБудущегоПисьма(Элементы.СписокРассылки.ТекущаяСтрока);
//		КонецЕсли;
//		СохранитьТабличныйДокументВложениеНаСервере(Элементы.СписокРассылки.ТекущаяСтрока);
//	Иначе
//		ТекДанные.ПечатнаяФорма = Неопределено;
//	КонецЕсли;  	
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ТабличныйДокументВложениеПриИзменении(Элемент)
//	
//	ТекущаяСтрока = Элементы.СписокРассылки.ТекущаяСтрока;
//	Если ТекущаяСтрока = Неопределено Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	СохранитьТабличныйДокументВложениеНаСервере(ТекущаяСтрока);
//	
//КонецПроцедуры
//&НаСервере
//Процедура СохранитьТабличныйДокументВложениеНаСервере(ИдентификаторСтроки)
//	
//	СтрокаТЗ = СписокРассылки.НайтиПоИдентификатору(ИдентификаторСтроки);
//	
//	СтрокаТЗ.ПечатнаяФорма = Новый ХранилищеЗначения(ТабличныйДокументВложение);
//	СтрокаТЗ.ПечатнаяФормаИзменена = Истина;
//	
//КонецПроцедуры

#КонецОбласти
