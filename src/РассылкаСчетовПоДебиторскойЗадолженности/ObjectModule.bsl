#Область ПолучениеДанныхОЗадолженности

Процедура ПолучитьДанныеНаОснованииСКД(СКД, ОбъектДляЗагрузки, ИсполняемыеНастройки = Неопределено, СтруктураПараметров = Неопределено, РасшифровкаСКД = Неопределено, МакетКомпоновки = Неопределено, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Если ТипЗнч(ОбъектДляЗагрузки) = Тип("ТабличныйДокумент") Тогда
		ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанных");
	Иначе
		ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	КонецЕсли;
	
	Если ИсполняемыеНастройки = Неопределено Тогда
		ИсполняемыеНастройки = СКД.НастройкиПоУмолчанию;
	КонецЕсли;
	
	Если СтруктураПараметров <> Неопределено Тогда
		КоллекцияЗначенийПараметров = ИсполняемыеНастройки.ПараметрыДанных.Элементы;
		Для каждого Параметр Из СтруктураПараметров Цикл
			НайденноеЗначениеПараметра = КоллекцияЗначенийПараметров.Найти(Параметр.Ключ);
			Если НайденноеЗначениеПараметра <> Неопределено Тогда
				НайденноеЗначениеПараметра.Использование = Истина;
				НайденноеЗначениеПараметра.Значение = Параметр.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МакетКомпоновкиСКД = КомпоновщикМакета.Выполнить(СКД, ИсполняемыеНастройки, РасшифровкаСКД, МакетКомпоновки, ТипГенератора);
	
	ПроцессорКомпановки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпановки.Инициализировать(МакетКомпоновкиСКД, ВнешниеНаборыДанных, РасшифровкаСКД);
	
	Если ТипЗнч(ОбъектДляЗагрузки) = Тип("ТабличныйДокумент") Тогда
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ОбъектДляЗагрузки);
		
	Иначе
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ОбъектДляЗагрузки);
	КонецЕсли;
	
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	
	ПроцессорВывода.Вывести(ПроцессорКомпановки, Истина);
	
КонецПроцедуры // ПолучитьДанныеНаОснованииСКД()

Функция ВключитьОтборПоСегментуПартнеровВСКД(НастройкиКД) Экспорт
	
	// Если в настройках СКД включено использование отбора по сегменту партнеров,
	// то процедура устанавливает служебный параметр использования отбора по сегменту партнеров.
	
	ПараметрИспользуетсяОтборПоСегменту = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
	НастройкиКД,
	"ИспользуетсяОтборПоСегментуПартнеров");
	Если ПараметрИспользуетсяОтборПоСегменту = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрИспользуетсяОтборПоСегменту.Значение = Ложь;
	ПараметрИспользуетсяОтборПоСегменту.Использование = Ложь;
	
	//Если ТипЗнч(ОбъектНастройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
	//	НастройкиОсновнойСхемы = ОбъектНастройки.ПолучитьНастройки();
	//ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
	//	НастройкиОсновнойСхемы = ОбъектНастройки.Настройки;
	//КонецЕсли;
	
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиКД.Отбор, "СегментПартнеров");
	ИспользуетсяОтборПоСегменту = Ложь;
	
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда  
			ИспользуетсяОтборПоСегменту = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКД, "ИспользуетсяОтборПоСегментуПартнеров", Истина, ИспользуетсяОтборПоСегменту);
	
	Возврат ИспользуетсяОтборПоСегменту;
	
КонецФункции

#КонецОбласти

#Область Служебные

Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", 		"<АМ> Рассылка счетов по дебиторской задолженности (версия 1.3)");
	РегистрационныеДанные.Вставить("БезопасныйРежим", 	Ложь);
	РегистрационныеДанные.Вставить("Версия", 			"1.3");          
	РегистрационныеДанные.Вставить("Вид", 				"ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Информация", 		"Обработка ""Рассылка счетов по дебиторской задолженности (версия 1.3)""");
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Идентификатор");
	Команды.Колонки.Добавить("Представление");
	Команды.Колонки.Добавить("Модификатор");
	Команды.Колонки.Добавить("ПоказыватьОповещение");
	Команды.Колонки.Добавить("Использование");   	
	
	строкаКоманды = Команды.Добавить();
	строкаКоманды.Идентификатор 		= "1";
	строкаКоманды.Представление 		= "<АМ> Рассылка счетов по дебиторской задолженности (версия 1.3)";
	строкаКоманды.ПоказыватьОповещение 	= Истина;
	строкаКоманды.Использование 		= "ОткрытиеФормы";              
	
	РегистрационныеДанные.Вставить("Команды", Команды);
	
	Возврат РегистрационныеДанные;
	
КонецФункции

Функция СтрВхождения(Строка, ПодстрокаПоиска, ё = 0)
	
	Ответ = Новый Массив;
	
	Для ж = 1 По СтрЧислоВхождений(Строка, ПодстрокаПоиска) Цикл
		
		ё = Найти(Сред(Строка, ё + 1), ПодстрокаПоиска) + ё; 
		Ответ.Добавить(ё)
		
	КонецЦикла;
	
	Возврат Ответ
	
КонецФункции
Процедура РаспаковкаТекстаЗапроса(СхемаКомпоновкиДанных) Экспорт
	
	РазмерШага = 536870912; // 2^29 секунд - это 17 лет назад - февраль 1997 года!
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных3.Элементы[0].Запрос;
	Разделители = СтрВхождения(ТекстЗапроса, ";");
	Рефрен = Сред(ТекстЗапроса, Разделители[12] + 1, Разделители[13] - Разделители[12]);
	Рефрены = "";
	Пока РазмерШага > 1 Цикл 
		Рефрены = Рефрены + СтрЗаменить(СтрЗаменить(Рефрен, "Шаг1", "Шаг" + Формат(РазмерШага / 2, "ЧГ=0")), "536870912", Формат(РазмерШага, "ЧГ=0")); 
		РазмерШага = РазмерШага / 2
	КонецЦикла;
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных3.Элементы[0].Запрос = Сред(ТекстЗапроса, 1, Разделители[12]) + Рефрены + Сред(ТекстЗапроса, Разделители[13] + 1);
	
	РазмерШага = 536870912; // 2^29 секунд - это 17 лет назад - февраль 1997 года!
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных3.Элементы[1].Запрос;
	Разделители = СтрВхождения(ТекстЗапроса, ";");
	Рефрен = Сред(ТекстЗапроса, Разделители[5] + 1, Разделители[6] - Разделители[5]);
	Рефрены = "";
	Пока РазмерШага > 1 Цикл 
		Рефрены = Рефрены + СтрЗаменить(СтрЗаменить(Рефрен, "Шаг1", "Шаг" + Формат(РазмерШага / 2, "ЧГ=0")), "536870912", Формат(РазмерШага, "ЧГ=0")); 
		РазмерШага = РазмерШага / 2
	КонецЦикла;
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных3.Элементы[1].Запрос = Сред(ТекстЗапроса, 1, Разделители[5]) + Рефрены + Сред(ТекстЗапроса, Разделители[6] + 1);
	
	РазмерШага = 536870912; // 2^29 секунд - это 17 лет назад - февраль 1997 года!
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных3.Элементы[2].Запрос;
	Разделители = СтрВхождения(ТекстЗапроса, ";");
	Рефрен = Сред(ТекстЗапроса, Разделители[11] + 1, Разделители[12] - Разделители[11]);
	Рефрены = "";
	Пока РазмерШага > 1 Цикл 
		Рефрены = Рефрены + СтрЗаменить(СтрЗаменить(Рефрен, "Шаг1", "Шаг" + Формат(РазмерШага / 2, "ЧГ=0")), "536870912", Формат(РазмерШага, "ЧГ=0")); 
		РазмерШага = РазмерШага / 2
	КонецЦикла;
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных3.Элементы[2].Запрос = Сред(ТекстЗапроса, 1, Разделители[11]) + Рефрены + Сред(ТекстЗапроса, Разделители[12] + 1);
	
	РазмерШага = 536870912; // 2^29 секунд - это 17 лет назад - февраль 1997 года!
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных3.Элементы[3].Запрос;
	Разделители = СтрВхождения(ТекстЗапроса, ";");
	Рефрен = Сред(ТекстЗапроса, Разделители[5] + 1, Разделители[6] - Разделители[5]);
	Рефрены = "";
	Пока РазмерШага > 1 Цикл 
		Рефрены = Рефрены + СтрЗаменить(СтрЗаменить(Рефрен, "Шаг1", "Шаг" + Формат(РазмерШага / 2, "ЧГ=0")), "536870912", Формат(РазмерШага, "ЧГ=0")); 
		РазмерШага = РазмерШага / 2
	КонецЦикла;
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных3.Элементы[3].Запрос = Сред(ТекстЗапроса, 1, Разделители[5]) + Рефрены + Сред(ТекстЗапроса, Разделители[6] + 1);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеТекстаИПечатныхФорм

Функция СформироватьТекстПисьма(СтрокаТЗ, ПараметрыШаблона, ПараметрыПисьма) Экспорт	
	
	ШаблонТекстаПисьма 	= ПараметрыШаблона.Текст;
			
	// ищем место, с которого начинается маркированный список
	НачалоМаркированногоСписка 		= СтрНайти(ВРЕГ(ШаблонТекстаПисьма), "<UL>");
	ШаблонТекстHTML_Начало 			= Сред(ШаблонТекстаПисьма, 1, НачалоМаркированногоСписка+3);
	
	НачалоСтрокиСписка 				= СтрНайти(ВРЕГ(ШаблонТекстаПисьма), "<LI>",, НачалоМаркированногоСписка);
	КонецСтрокиСписка 				= СтрНайти(ВРЕГ(ШаблонТекстаПисьма), "</LI>",, НачалоСтрокиСписка)+5;
	ШаблонТекстHTML_СтрокаСписка 	= Сред(ШаблонТекстаПисьма, НачалоСтрокиСписка, КонецСтрокиСписка-НачалоСтрокиСписка);
	
	ШаблонТекстHTML_Окончание 		= Сред(ШаблонТекстаПисьма, КонецСтрокиСписка);
	
	
	ТекстHTML_Начало = СтрЗаменить(ШаблонТекстHTML_Начало, 	"[Произвольные.Партнер]", 					СтрокаТЗ.Партнер);
	ТекстHTML_Начало = СтрЗаменить(ТекстHTML_Начало, 		"[ОбщиеРеквизиты.ТекущаяДата]", 			Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"));
	ТекстHTML_Начало = СтрЗаменить(ТекстHTML_Начало, 		"[Произвольные.СуммаДолгаИтого]", 			Формат(СтрокаТЗ.Долг, "ЧДЦ=2"));
	ТекстHTML_Начало = СтрЗаменить(ТекстHTML_Начало, 		"[Произвольные.СуммаПросроченоИтого]", 		Формат(СтрокаТЗ.Просрочено, "ЧДЦ=2; ЧН=0"));
	
	ТекстHTML_Строки = "";
	
	МногоПробелов = "																																							";
	
	// вначале рассчитаем ширину полей
	ДлинаДолг = 0;
	ДлинаПросрочено = 0;
	ДлинаРегистратор = 0;
	ДлинаПросрочка = 0;
	тзДокументы = СтрокаТЗ.Документы.Выгрузить();
	тзДокументы.Колонки.Добавить("РегистраторСтрока");
	//тзДокументы.Колонки.Добавить("ПросрочкаДнейСтрока");
	
	Для Каждого СтрокаДетали Из тзДокументы Цикл 
		ДлинаДолг 		= макс(ДлинаДолг, 		СтрДлина(Формат(СтрокаДетали.Долг, "ЧДЦ=2")));
		ДлинаПросрочено = макс(ДлинаПросрочено, СтрДлина(Формат(СтрокаДетали.Просрочено, "ЧДЦ=2")));
		
		РегистраторСтрока = Строка(СтрокаДетали.Регистратор);
		Если ТипЗнч(СтрокаДетали.Регистратор) = Тип("ДокументСсылка.ВводОстатков") Тогда 
			РегистраторСтрока = "Долг на начало 2018 года";
		Иначе
			РегистраторСтрока = СтрЗаменить(РегистраторСтрока, "Реализация товаров и услуг", "Реализация");
			РегистраторСтрока = Лев(РегистраторСтрока, СтрДлина(РегистраторСтрока)-8);
		КонецЕсли;	                                                                                       		
		
		ДлинаРегистратор = макс(ДлинаРегистратор, СтрДлина(СокрЛП(РегистраторСтрока)));
		
		СтрокаДетали.РегистраторСтрока = СокрЛП(РегистраторСтрока);
		
		ПросрочкаДней = ?(НачалоДня(ТекущаяДата()) > НачалоДня(СтрокаДетали.ДатаПлатежа), (НачалоДня(ТекущаяДата()) - НачалоДня(СтрокаДетали.ДатаПлатежа))/60/60/24, 0);
		ДлинаПросрочка = макс(ДлинаПросрочка, СтрДлина(Формат(ПросрочкаДней, "ЧДЦ=; ЧН=-")));
	КонецЦикла;
	
	Для Каждого СтрокаДетали Из тзДокументы Цикл 	
		
		ПросрочкаДней = ?(НачалоДня(ТекущаяДата()) > НачалоДня(СтрокаДетали.ДатаПлатежа), (НачалоДня(ТекущаяДата()) - НачалоДня(СтрокаДетали.ДатаПлатежа))/60/60/24, 0);
		
		ТекстHTML_СтрокаСписка = СтрЗаменить(ШаблонТекстHTML_СтрокаСписка, 	"[Произвольные.ДокументОснование]", 	Лев(СтрокаДетали.РегистраторСтрока + МногоПробелов, ДлинаРегистратор));
		ТекстHTML_СтрокаСписка = СтрЗаменить(ТекстHTML_СтрокаСписка, 		"[Произвольные.ПлановаяДатаОплаты]", 	Формат(СтрокаДетали.ДатаПлатежа, "ДФ=dd.MM.yyyy"));
		ТекстHTML_СтрокаСписка = СтрЗаменить(ТекстHTML_СтрокаСписка, 		"[Произвольные.ПросрочкаДней]", 		Прав(МногоПробелов + Формат(ПросрочкаДней, "ЧДЦ=; ЧН=-"), ДлинаПросрочка));
		ТекстHTML_СтрокаСписка = СтрЗаменить(ТекстHTML_СтрокаСписка, 		"[Произвольные.СуммаДолга]", 			Прав(МногоПробелов + Формат(СтрокаДетали.Долг, "ЧДЦ=2"), ДлинаДолг));
		ТекстHTML_СтрокаСписка = СтрЗаменить(ТекстHTML_СтрокаСписка, 		"[Произвольные.СуммаПросрочено]", 		Прав(МногоПробелов + Формат(СтрокаДетали.Просрочено, "ЧДЦ=2; ЧН=0"), ДлинаПросрочено));
		
		ТекстHTML_Строки = ТекстHTML_Строки + ТекстHTML_СтрокаСписка;
	КонецЦикла;

	ТекстHTML_Окончание = СтрЗаменить(ШаблонТекстHTML_Окончание, 			"[Произвольные.Организация]", 						СтрокаТЗ.Организация.НаименованиеСокращенное);
	ТекстHTML_Окончание = СтрЗаменить(ТекстHTML_Окончание, 					"[Произвольные.ДополнительнаяИнформация]", 	СокрЛП(ПараметрыПисьма.ДополнительнаяИнформация) 
						+ ?(ЗначениеЗаполнено(ПараметрыПисьма.ДополнительнаяИнформация), "<BR><BR>", ""));
						
	Если НЕ ПараметрыПисьма.Свойство("Результат") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПисьма.Результат.Руководитель) Тогда 
		ТаблицаОтветственных = ОтветственныеЛицаСервер.ПолучитьТаблицуОтветственныхЛицПоОтбору(Новый Структура("Дата, Организация, ПравоПодписиПоДоверенности", ТекущаяДата(), СтрокаТЗ.Организация, Ложь));
		Для Каждого иСтрока Из ТаблицаОтветственных Цикл
			Если иСтрока.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда 
				ТекстHTML_Окончание = СтрЗаменить(ТекстHTML_Окончание, "[Произвольные.ДолжностьРуководителя]", 		иСтрока.Должность);  
				ТекстHTML_Окончание = СтрЗаменить(ТекстHTML_Окончание, "[Произвольные.Руководитель]", 				иСтрока.Ссылка);  
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекстHTML_Окончание = СтрЗаменить(ТекстHTML_Окончание, "[Произвольные.ДолжностьРуководителя]", 				ПараметрыПисьма.Результат.Руководитель.Должность);  
		ТекстHTML_Окончание = СтрЗаменить(ТекстHTML_Окончание, "[Произвольные.Руководитель]", 						ПараметрыПисьма.Результат.Руководитель);  
	КонецЕсли;
						
	
	Возврат (ТекстHTML_Начало + ТекстHTML_Строки + ТекстHTML_Окончание);
	
КонецФункции
Процедура СформироватьТабличныйДокументВложение(СтрокаТЗ, ПараметрыШаблона, ПараметрыПисьма) Экспорт 
			
	Если СтрокаТЗ.Документы.Количество() = 0 Тогда 
		Возврат ;
	КонецЕсли;
	
	Договор = СтрокаТЗ.Документы[0].Договор;
	
	Для Каждого иДок Из СтрокаТЗ.Документы Цикл
		Если ЗначениеЗаполнено(иДок.Договор) Тогда 
			Договор = иДок.Договор;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда 
		Сообщить("Неизвестен договор, по которому существует задолженность");
		ПараметрыЗаполнения = Новый Структура("Номер, ВалютаВзаиморасчетов", "-", Константы.ВалютаРегламентированногоУчета.Получить());
	Иначе
		ПараметрыЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ВалютаВзаиморасчетов, Номер, БанковскийСчет");
	КонецЕсли;
		
	ПараметрыЗаполнения.Вставить("Партнер", 			СтрокаТЗ.Партнер);
	ПараметрыЗаполнения.Вставить("Контрагент", 			СтрокаТЗ.Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", 		СтрокаТЗ.Организация);
	ПараметрыЗаполнения.Вставить("КонтактноеЛицо", 		СтрокаТЗ.КонтактноеЛицо);
	ПараметрыЗаполнения.Вставить("СуммаДокумента", 		СтрокаТЗ.Просрочено);
	ПараметрыЗаполнения.Вставить("Префикс", 			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЗ.Организация, "Префикс"));
	ПараметрыЗаполнения.Вставить("Постфикс", 			СтрокаТЗ.НомерСтроки);	
	
	ПараметрыЗаполнения.Вставить("Договор", 			Договор);
	ПараметрыЗаполнения.Вставить("ДокументОснование",	Договор);
	ПараметрыЗаполнения.Вставить("Валюта", 				ПараметрыЗаполнения.ВалютаВзаиморасчетов);
	ПараметрыЗаполнения.Вставить("НомерДокумента", 		ПараметрыЗаполнения.Номер);
	
	ПараметрыЗаполнения.Вставить("Касса", 				Неопределено);
	ПараметрыЗаполнения.Вставить("ФормаОплаты", 		Неопределено); 	
	ПараметрыЗаполнения.Вставить("ЧастичнаяОплата", 	Истина);
	
	НазначениеПлатежа = "";
	тзДокументы = СтрокаТЗ.Документы.Выгрузить();
	тзДокументы.Свернуть("Договор", "Просрочено");
	Для Каждого иДолг Из тзДокументы Цикл
		НазначениеПлатежа = НазначениеПлатежа + ?(НазначениеПлатежа = "", "Оплата задолженности по договор" + ?(тзДокументы.Количество()=1, "у", "ам") + ": N ", ", N ") + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(иДолг.Договор, "Номер");
	КонецЦикла;  	
	ПараметрыЗаполнения.Вставить("НазначениеПлатежа", 	НазначениеПлатежа);
	
	//Для каждого иЭлемент Из ПараметрыПисьма Цикл
	//	ПараметрыЗаполнения.Вставить(иЭлемент.Ключ, иЭлемент.Значение); // пока не используется т.к. там только ДополнительнаяИнформация
	//КонецЦикла;
	
	СоздатьСчетНаОплату(ПараметрыЗаполнения, ПараметрыШаблона, ПараметрыПисьма.Результат);
	
КонецПроцедуры

Процедура СоздатьСчетНаОплату(ПараметрыЗаполнения, ПараметрыШаблона, СтруктураВозврата)
		
	//СчетНаОплатуКлиенту = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		ДокументОбъект = Документы.СчетНаОплатуКлиенту.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ПараметрыЗаполнения);
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.УстановитьНовыйНомер();
		
		Нолики = Лев("000", СтрДлина(Формат(ПараметрыЗаполнения.Постфикс, "ЧГ=0"))); 
		ДокументОбъект.Номер = СтрЗаменить(ДокументОбъект.Номер, "-"+Нолики, "-") + Формат(ПараметрыЗаполнения.Постфикс, "ЧГ=0"); 		
		
		НовыйЭтап = ДокументОбъект.ЭтапыГрафикаОплаты.Добавить();
		НовыйЭтап.ДатаПлатежа    = ДокументОбъект.Дата; 			//ТекущийЭтап.ДатаПлатежа;
		НовыйЭтап.СуммаПлатежа   = ДокументОбъект.СуммаДокумента; 	//ТекущийЭтап.СуммаКОплате;
		НовыйЭтап.ЭтоЗалогЗаТару = Ложь; 							//ТекущийЭтап.ЭтоЗалогЗаТару;      		
		
		ТаблицаОтветственных = ОтветственныеЛицаСервер.ПолучитьТаблицуОтветственныхЛицПоОтбору(Новый Структура("Дата, Организация, ПравоПодписиПоДоверенности", ДокументОбъект.Дата, ДокументОбъект.Организация, Ложь));
		Для Каждого иСтрока Из ТаблицаОтветственных Цикл
			Если иСтрока.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда 
				ДокументОбъект.Руководитель = иСтрока.Ссылка;
			ИначеЕсли иСтрока.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда 
				ДокументОбъект.ГлавныйБухгалтер = иСтрока.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		СчетНаОплатуКлиенту = ДокументОбъект.Ссылка;
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ДокументОбъект);
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru='Не удалось сформировать %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       ДокументОбъект);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
		//СтруктураВозврата = Неопределено;

		Возврат; // Неопределено;
	КонецПопытки;
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроизвольныеПараметры", Новый Структура("СчетНаОплату", ДокументОбъект.Ссылка));
	
	//УникальныйИдентификатор = Новый УникальныйИдентификатор; // идентификатор формы, необходим для размещения вложений во временном хранилище - тут не нужен.
	
	//ПараметрыОтправки = СформироватьПараметрыОтправки(ПараметрыШаблона.Ссылка, "всапрьвеньгиорт", ПараметрыШаблона.УникальныйИдентификатор, ДополнительныеПараметры);
	ПараметрыОтправки = СформироватьПараметрыОтправки(Неопределено, Неопределено, ПараметрыШаблона.УникальныйИдентификатор, ДополнительныеПараметры);
	
	СведенияОШаблоне = ШаблоныСообщенийСлужебный.СведенияОШаблоне(ПараметрыШаблона);
	
	ДобавитьВыбранныеПечатныеФормыВоВложения(ПараметрыОтправки, СведенияОШаблоне, СтруктураВозврата.ПечатныеФормы, ПараметрыШаблона);
		
	ОтменитьТранзакцию();
			
КонецПроцедуры
Функция СформироватьПараметрыОтправки(Шаблон, Предмет, УникальныйИдентификатор, ДополнительныеПараметры = Неопределено)
	
	//  Шаблон                   - СправочникСсылка.ШаблоныСообщений - ссылка на шаблон сообщения.
	//  Предмет                  - Произвольный - объект основания для шаблона сообщений, типы объектов перечислены в
	//                                            определяемом типе ПредметШаблонаСообщения.
	//  УникальныйИдентификатор  - УникальныйИдентификатор - идентификатор формы, необходим для размещения вложений во
	//                                                       временном хранилище.
	//  ДополнительныеПараметры  - Структура - Необязательный, список дополнительных параметров, который будет передан в
	//                                         параметр Сообщение в процедурах ПриФормированииСообщения при создании сообщения.
	//     * ПреобразовыватьHTMLДляФорматированногоДокумента - Булево - необязательный, по умолчанию Ложь, определяет
	//                      необходимо ли преобразование HTML текста сообщения содержащего картинки в тексте письма из-за
	//                      особенностей вывода изображений в форматированном документе.
	
	ПараметрыОтправки = ШаблоныСообщенийКлиентСервер.КонструкторПараметровОтправки(Шаблон, Предмет, УникальныйИдентификатор);
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтправки.ДополнительныеПараметры, ДополнительныеПараметры, Истина);
	КонецЕсли;
	
	Возврат ПараметрыОтправки;

КонецФункции
Процедура ДобавитьВыбранныеПечатныеФормыВоВложения(ПараметрыОтправки, СведенияОШаблоне, Вложения, ПараметрыШаблона)  // модифицированная копия процедуры ШаблоныСообщенийСлужебный.ДобавитьВыбранныеПечатныеФормыВоВложения
		
	Для каждого ВложениеПечатнаяФорма Из СведенияОШаблоне.Вложения Цикл
		
		ИмяПараметраВыбраннойПечатнойФормы = ПараметрыШаблона.ВыбранныеВложения[ВложениеПечатнаяФорма.Идентификатор];
		Если ВложениеПечатнаяФорма.Статус = "ПечатнаяФорма" И ИмяПараметраВыбраннойПечатнойФормы <> Неопределено Тогда
			
			ИмяМенеджераПечати = ВложениеПечатнаяФорма.МенеджерПечати;
			ПараметрыПечати    = ВложениеПечатнаяФорма.ПараметрыПечати;
			МассивОбъектов     = Новый Массив;
			Если ПустаяСтрока(ИмяПараметраВыбраннойПечатнойФормы) Тогда
				МассивОбъектов.Добавить(ПараметрыОтправки.Предмет);
			Иначе
				МассивОбъектов.Добавить(ПараметрыОтправки.ДополнительныеПараметры.ПроизвольныеПараметры[ИмяПараметраВыбраннойПечатнойФормы]);
			КонецЕсли;
			ИменаМакетов       = ?(ПустаяСтрока(ВложениеПечатнаяФорма.Имя), ВложениеПечатнаяФорма.Идентификатор, ВложениеПечатнаяФорма.Имя);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
				МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
				Если ИмяМенеджераПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки" Тогда
					ИменаМакетов = "ВнешняяПечатнаяФорма." + ИменаМакетов;
				КонецЕсли;
				
				Попытка
					КоллекцияПечатныхФорм = МодульУправлениеПечатью.ПодготовитьПечатныеФормы(ИмяМенеджераПечати, ИменаМакетов, МассивОбъектов, ПараметрыПечати);
				Исключение
					// лебедев ->
					//// Ошибка при создании внешний печатной формы. Создаем дальше письмо, без этой печатной формы.
					//ЗаписьЖурналаРегистрации(
					//	ИмяСобытияЖурналаРегистрации(),
					//	УровеньЖурналаРегистрации.Ошибка,,, НСтр("ru = 'Ошибка при создании внешний печатной формы. По причине:'")
					//		+ Символы.ПС + ОписаниеОшибки());
					Сообщить("Ошибка при создании внешний печатной формы по причине: " + Символы.ПС + ОписаниеОшибки());
					// <-
					Прервать;
				КонецПопытки;
				
				// лебедев ->
				Если ТипЗнч(Вложения) = Тип("Массив") Тогда 
					Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм.КоллекцияПечатныхФорм Цикл
						Если ПечатнаяФорма = Неопределено Или ПечатнаяФорма.ТабличныйДокумент.ВысотаТаблицы = 0 Тогда
							Продолжить;
						КонецЕсли;
						Вложения.Добавить(ПечатнаяФорма.ТабличныйДокумент);
					КонецЦикла;
				Иначе
				// <-
					Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм.КоллекцияПечатныхФорм Цикл
						Если ПечатнаяФорма = Неопределено Или ПечатнаяФорма.ТабличныйДокумент.ВысотаТаблицы = 0 Тогда
							Продолжить;
						КонецЕсли;
						Результат = ПоместитьТабличныйДокументВоВременноеХранилище(ПечатнаяФорма, ПараметрыШаблона, ПараметрыОтправки.УникальныйИдентификатор);
						Для Каждого СохраненнаяПечатнаяФорма Из Результат Цикл
							Вложения.Вставить(СохраненнаяПечатнаяФорма.ИмяФайла, СохраненнаяПечатнаяФорма.АдресВоВременномХранилище);
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Функция ПоместитьТабличныйДокументВоВременноеХранилище(ПечатнаяФорма, ПараметрыШаблоны, УникальныйИдентификатор)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("АдресВоВременномХранилище");
	Результат.Колонки.Добавить("ИмяФайла");
	Результат.Колонки.Добавить("Размер");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		Если ПараметрыШаблоны.УпаковатьВАрхив Тогда
			ИмяАрхива      = ПолучитьИмяВременногоФайла("zip");
			ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
		КонецЕсли;
		
		// подготовка временной папки
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ИмяВременнойПапки);
		ИспользованныеИменаФайлов = Новый Соответствие;
		ТаблицаФорматов = МодульУправлениеПечатью.ФорматыСохраненияТабличногоДокумента();
		
		Для Каждого ЭлементСписка Из ПараметрыШаблоны.ФорматыВложений Цикл
			
			НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ЭлементСписка.Значение))[0];
			ТабличныйДокумент = ПечатнаяФорма.ТабличныйДокумент;
			
			ИмяФайла = ПолучитьИмяВременногоФайлаДляПечатнойФормы(ПечатнаяФорма.СинонимМакета, НастройкиФормата.Расширение, ИспользованныеИменаФайлов, ПараметрыШаблоны.ТранслитерироватьИменаФайлов);
			ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла;
			
			ТабличныйДокумент.Записать(ПолноеИмяФайла, ЭлементСписка.Значение);
			
			Если ЗаписьZipФайла <> Неопределено Тогда 
				ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
			Иначе
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
				АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				НоваяСтрока                           = Результат.Добавить();
				НоваяСтрока.АдресВоВременномХранилище = АдресВоВременномХранилище;
				НоваяСтрока.ИмяФайла                  = ИмяФайла;
				НоваяСтрока.Размер                    = ДвоичныеДанные.Размер();
			КонецЕсли;
			
		КонецЦикла;
		
		// если архив подготовлен, записываем и помещаем его во временное хранилище
		Если ЗаписьZipФайла <> Неопределено Тогда
			ЗаписьZipФайла.Записать();
			ФайлАрхива = Новый Файл(ИмяАрхива);
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			НоваяСтрока                           = Результат.Добавить();
			НоваяСтрока.ИмяФайла                  = ИмяФайлаДляАрхива(ИмяФайла);
			НоваяСтрока.Размер                    = ДвоичныеДанные.Размер();
			НоваяСтрока.АдресВоВременномХранилище = АдресВоВременномХранилище;
		КонецЕсли;
		
		УдалитьФайлы(ИмяВременнойПапки);
		Если ЗначениеЗаполнено(ИмяАрхива) Тогда
			УдалитьФайлы(ИмяАрхива);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
Функция ПолучитьИмяВременногоФайлаДляПечатнойФормы(ИмяМакета, Расширение, ИспользованныеИменаФайлов, ТранслитерироватьИменаФайлов)
	
	ШаблонИмениФайла = "%1%2.%3";
	
	ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяМакета, "", Расширение));
	
	НомерИспользования = ?(ИспользованныеИменаФайлов[ИмяВременногоФайла] <> Неопределено,
	ИспользованныеИменаФайлов[ИмяВременногоФайла] + 1,
	1);
	
	ИспользованныеИменаФайлов.Вставить(ИмяВременногоФайла, НомерИспользования);
	
	// если имя уже было ранее использовано, прибавляем счетчик в конце имени
	Если НомерИспользования > 1 Тогда
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонИмениФайла,
		ИмяМакета,
		" (" + НомерИспользования + ")",
		Расширение));
	КонецЕсли;
	
	Если ТранслитерироватьИменаФайлов Тогда
		ИмяВременногоФайла = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ИмяВременногоФайла);
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции
Функция ИмяФайлаДляАрхива(ИмяФайла)
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФайла,".");
	Если МассивСтрок.Количество() = 2 Тогда
		Возврат  МассивСтрок[0] +".zip";
	ИначеЕсли МассивСтрок.Количество() = 1 Тогда
		Возврат ИмяФайла + ".zip";
	Иначе
		Возврат ИмяФайла;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФормированиеИОтправкаПисем

Процедура ПодготовитьПисьмаКОтправке(ПараметрыШаблона, ПараметрыПисьма, СписокРассылки) Экспорт
		
	//ТекПользователь = Пользователи.ТекущийПользователь();
	мсвСозданныеПисьма = Новый Массив;	
	ПараметрыПисьма.Вставить("Тема", 	ПараметрыШаблона.Тема);
	ПараметрыОтправки = СформироватьПараметрыОтправки(Неопределено, Неопределено, ПараметрыШаблона.УникальныйИдентификатор, ПараметрыПисьма);
	
	//НачатьТранзакцию();
	
	Для Каждого СтрокаТЗ Из СписокРассылки Цикл
		
		Если Не СтрокаТЗ.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Email) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатЗаполнения = Новый Структура;
		РезультатЗаполнения.Вставить("Руководитель"); 							// это вернем для использования в тексте письма
		РезультатЗаполнения.Вставить("ПечатныеФормы", Новый Соответствие);    	// сюда попадут адреса сохраненных печ.форм
		
		ПараметрыПисьма.Вставить("Результат", РезультатЗаполнения);
				
		СформироватьТабличныйДокументВложение(СтрокаТЗ, ПараметрыШаблона, ПараметрыПисьма);
		
		ПараметрыОтправки.Вставить("ПечатныеФормы", ПараметрыПисьма.Результат.ПечатныеФормы);
		
		// текст письма
		Если ЗначениеЗаполнено(СтрокаТЗ.ТекстПисьма) Тогда 
			ПараметрыОтправки.ДополнительныеПараметры.Вставить("Текст", СтрокаТЗ.ТекстПисьма);
		Иначе
			ПараметрыОтправки.ДополнительныеПараметры.Вставить("Текст", СформироватьТекстПисьма(СтрокаТЗ, ПараметрыШаблона, ПараметрыПисьма));
		КонецЕсли;
		
		ПараметрыОтправки.ДополнительныеПараметры.Вставить("Партнер", 			СтрокаТЗ.Партнер);
		ПараметрыОтправки.ДополнительныеПараметры.Вставить("КонтактноеЛицо", 	СтрокаТЗ.КонтактноеЛицо);
		ПараметрыОтправки.ДополнительныеПараметры.Вставить("EMail", 			СтрокаТЗ.EMail);
		
		РезультатОтправки = СформироватьСообщениеИОтправить(ПараметрыОтправки, ПараметрыШаблона);
		
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, РезультатОтправки);
			
	КонецЦикла;
		
	//ЗафиксироватьТранзакцию();
	//ОтменитьТранзакцию();
	
КонецПроцедуры
Процедура ОтправитьПисьма(Письма, Знач ДатаКогдаОтправить, Знач Интервал) Экспорт 
		
	Для Каждого иПисьмо Из Письма Цикл		
		
		Письмо = иПисьмо.ПолучитьОбъект();
		
		Если Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено 
			ИЛИ Письмо.ПометкаУдаления Тогда 
			Продолжить;
		КонецЕсли;
		
		Попытка
			Письмо.Заблокировать();
		Исключение
			Сообщить("Невозможно заблокировать документ " + Письмо);
			Продолжить;
		КонецПопытки;  	
		
		Если Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда 
			Попытка
				Письмо.СтатусПисьма           	= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
				Письмо.ДатаКогдаОтправить   	= Макс(ДатаКогдаОтправить, ТекущаяДата());
				Письмо.Записать(РежимЗаписиДокумента.Запись);
				
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при планировании отправки письма %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Продолжить;
			КонецПопытки;
			
			Если ЗначениеЗаполнено(Письмо.ДатаКогдаОтправить) Тогда 
				ДатаКогдаОтправить = Письмо.ДатаКогдаОтправить + Интервал;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Письмо.ДатаКогдаОтправить) ИЛИ Письмо.ДатаКогдаОтправить < ТекущаяДата() Тогда 
			
			Попытка
				ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(Письмо);
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при отправке письма %1'"),КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				//Возврат;
				Продолжить;
			КонецПопытки;
			
			Если НЕ Письмо.УдалятьПослеОтправки Тогда
				
				Попытка
					Письмо.ИдентификаторСообщения = ИдентификаторПисьма;
					Письмо.СтатусПисьма           = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
					Письмо.ДатаОтправления        = ТекущаяДатаСеанса();
					Письмо.Записать(РежимЗаписиДокумента.Запись);
					
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при записи письма после успешной отправки %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					Продолжить;
				КонецПопытки;
				
			Иначе  		
				Письмо.Прочитать();
				Письмо.Удалить();  		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСообщение(ПараметрыОтправки, ПараметрыШаблона) // модифицированная копия процедуры из общего модуля ШаблоныСообщенийСлужебный 
	
	// лебедев -
	//Если ПараметрыОтправки.Шаблон = Справочники.ШаблоныСообщений.ПустаяСсылка() Тогда
	//	Возврат СообщениеБезШаблона(ПараметрыОтправки);
	//КонецЕсли;
	//
	//ПараметрыШаблона = ПараметрыШаблона(ПараметрыОтправки.Шаблон);
	//Если ПараметрыОтправки.ДополнительныеПараметры.Свойство("ПараметрыСообщения") Тогда
	//	ПараметрыШаблона.ПараметрыСообщения = ПараметрыОтправки.ДополнительныеПараметры.ПараметрыСообщения;
	//КонецЕсли;
	//
	//Если ПараметрыОтправки.Шаблон = Неопределено Тогда
	//	Если ПараметрыОтправки.Свойство("ДополнительныеПараметры")
	//		И ПараметрыОтправки.ДополнительныеПараметры.Свойство("ВидСообщения") Тогда
	//		ПараметрыШаблона.ТипШаблона = ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//МенеджерОбъекта = Неопределено;
	//СведенияОШаблоне = Неопределено;
	//Если ПараметрыОтправки.Предмет <> Неопределено Тогда
	//	СведенияОШаблоне = СведенияОШаблоне(ПараметрыШаблона);
	//КонецЕсли;
	//Если ЗначениеЗаполнено(ПараметрыШаблона.ПолноеИмяТипаНазначения) Тогда
	//	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПараметрыШаблона.ПолноеИмяТипаНазначения);
	//	Если МетаданныеОбъекта <> Неопределено Тогда
	//			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыШаблона.ПолноеИмяТипаНазначения);
	//	КонецЕсли;
	//КонецЕсли;
	
	СформированноеСообщение = ШаблоныСообщенийСлужебный.КонструкторСообщения(ПараметрыШаблона);
	
	// лебедев -
	//Если ПараметрыШаблона = Неопределено Тогда
	//	Возврат СформированноеСообщение;
	//КонецЕсли;
	//
	//Если ПараметрыШаблона.ШаблонПоВнешнейОбработке Тогда
	//	Возврат СформироватьСообщениеВнешнейОбработкой(ПараметрыШаблона, СведенияОШаблоне, ПараметрыОтправки);
	//КонецЕсли;
	//
	//// Извлекаем из шаблона параметры
	//ПараметрыТекстаСообщения = ПараметрыИзТекстаСообщения(ПараметрыШаблона);
	//
	// Заполняем параметры
	//Сообщение = ЗаполнитьПараметрыСообщения(ПараметрыШаблона, ПараметрыТекстаСообщения, ПараметрыОтправки);
	Сообщение = Новый Структура("ЗначенияРеквизитов, ЗначенияОбщихРеквизитов, Вложения, ДополнительныеПараметры", Новый Соответствие, Новый Соответствие, Новый Соответствие, Новый Структура);  // лебедев +
	Сообщение.ДополнительныеПараметры = ПараметрыОтправки.ДополнительныеПараметры;   		
	
	// лебедев -
	// Вложения
	//Если ПараметрыШаблона.ТипШаблона = "Письмо" И СведенияОШаблоне <> Неопределено Тогда
	//	ДобавитьВыбранныеПечатныеФормыВоВложения(ПараметрыОтправки, СведенияОШаблоне, Сообщение.Вложения, ПараметрыШаблона);
	//КонецЕсли;    	
	
	Сообщение.Вложения = ПараметрыОтправки.ПечатныеФормы; // лебедев +	
	
	ДобавитьПрисоединенныеФайлыВоВложения(ПараметрыОтправки, Сообщение);
	
	// лебедев -
	//ШаблоныСообщенийПереопределяемый.ПриФормированииСообщения(Сообщение, ПараметрыШаблона.ПолноеИмяТипаНазначения, ПараметрыОтправки.Предмет, ПараметрыШаблона);
	//Если МенеджерОбъекта <> Неопределено Тогда
	//	МенеджерОбъекта.ПриФормированииСообщения(Сообщение, ПараметрыОтправки.Предмет, ПараметрыШаблона);
	//КонецЕсли;
	//
	// Заполнение значений параметров
	//СообщениеРезультат = УстановитьЗначенияРеквизитовВТекстСообщения(ПараметрыШаблона, ПараметрыТекстаСообщения, ПараметрыОтправки.Предмет);
	//СформированноеСообщение.Тема = СообщениеРезультат.Тема;
	//СформированноеСообщение.Текст = СообщениеРезультат.Текст;
	
	ЗаполнитьЗначенияСвойств(СформированноеСообщение, ПараметрыОтправки.ДополнительныеПараметры, "Тема,Текст");  	// лебедев +
	
	Для каждого Вложение Из Сообщение.Вложения Цикл
		НовоеВложение = СформированноеСообщение.Вложения.Добавить();
		Если ПараметрыШаблона.ТранслитерироватьИменаФайлов Тогда
			НовоеВложение.Представление = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Вложение.Ключ);
		Иначе
			НовоеВложение.Представление = Вложение.Ключ;
		КонецЕсли;
		НовоеВложение.АдресВоВременномХранилище = Вложение.Значение;
	КонецЦикла;
	
	Если ПараметрыШаблона.ТипШаблона = "Письмо" И ПараметрыШаблона.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		ШаблоныСообщенийСлужебный.ОбработатьHTMLДляФорматированногоДокумента(ПараметрыОтправки, СформированноеСообщение, ПараметрыОтправки.ДополнительныеПараметры.ПреобразовыватьHTMLДляФорматированногоДокумента);
	КонецЕсли;
	
	//ЗаполнитьПолучателейСообщения(ПараметрыОтправки, ПараметрыШаблона, СформированноеСообщение, МенеджерОбъекта);       	                          // лебедев -
	СформированноеСообщение.Получатель = Новый Массив;                                                                                                // лебедев +
	СформированноеСообщение.Получатель.Добавить(Новый Структура("Адрес, Представление, ИсточникКонтактнойИнформации",                                 // лебедев +
		ПараметрыОтправки.ДополнительныеПараметры.EMail, 
		Строка(ПараметрыОтправки.ДополнительныеПараметры.КонтактноеЛицо) + " (" + Строка(ПараметрыОтправки.ДополнительныеПараметры.Партнер) + ")", 
		ПараметрыОтправки.ДополнительныеПараметры.КонтактноеЛицо));   
	
	СформированноеСообщение.СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	
	Возврат СформированноеСообщение;
	
КонецФункции
Функция СформироватьСообщениеИОтправить(ПараметрыОтправки, ПараметрыШаблона) // модифицированная копия процедуры из общего модуля ШаблоныСообщенийСлужебный 
	
	Результат = Новый Структура("Отправлено, ОписаниеОшибки, Письмо", Ложь);
	
	Сообщение = СформироватьСообщение(ПараметрыОтправки, ПараметрыШаблона);
	
	// лебедев -
	//Если ПараметрыОтправки.Шаблон.ПредназначенДляSMS Тогда
	//	Если Сообщение.Получатель.Количество() = 0 Тогда
	//		Результат.ОписаниеОшибки  = НСтр("ru = 'Для отправки сообщения необходимо ввести номер телефонов получателей.'");
	//		Возврат Результат;
	//	КонецЕсли;
	//	
	//	НомераПолучателей = Новый Массив;
	//	Для каждого Получатель Из Сообщение.Получатель Цикл
	//		Если ТипЗнч(Получатель) = Тип("Структура") Тогда
	//			НомераПолучателей.Добавить(Получатель.НомерТелефона);
	//		Иначе
	//			НомераПолучателей.Добавить(Получатель.Значение);
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОтправкаSMS") Тогда
	//		МодульОтправкаSMS = ОбщегоНазначения.ОбщийМодуль("ОтправкаSMS");
	//		Если МодульОтправкаSMS.ДоступнаОтправкаSMS() Тогда
	//			
	//			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
	//				
	//				МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
	//				Если МодульВзаимодействия.ИспользуетсяПрочиеВзаимодействия() Тогда
	//					
	//					МодульВзаимодействия.СоздатьИОтправитьСообщениеSMS(Сообщение);
	//					Результат.Отправлено = Истина;
	//					Возврат Результат;
	//					
	//				КонецЕсли;
	//			КонецЕсли;
	//					
	//			РезультатОтправкаSMS = МодульОтправкаSMS.ОтправитьSMS(НомераПолучателей, Сообщение.Текст, Сообщение.ДополнительныеПараметры.Отправитель, Сообщение.ДополнительныеПараметры.ПеревестиВТранслит);
	//			Результат.Отправлено = ПустаяСтрока(РезультатОтправкаSMS.ОписаниеОшибки);
	//			Результат.ОписаниеОшибки = РезультатОтправкаSMS.ОписаниеОшибки;
	//				
	//		Иначе
	//			Результат.ОписаниеОшибки = НСтр("ru = 'Сообщение SMS не может быть отправлено сразу.'");
	//		КонецЕсли;
	//		
	//		Возврат Результат;
	//		
	//	КонецЕсли;
	//	
	//Иначе
		
		Если Сообщение.Получатель.Количество() = 0 Тогда
			Результат.ОписаниеОшибки  = НСтр("ru = 'Сообщение не может быть отправлено сразу, т.к необходимо ввести адрес электронной почты.'");
			Возврат Результат;
		КонецЕсли;
		
		ПараметрыПисьма = Новый Структура();
		ПараметрыПисьма.Вставить("Тема",      Сообщение.Тема);
		ПараметрыПисьма.Вставить("Тело",      Сообщение.Текст);
		ПараметрыПисьма.Вставить("Вложения",  Новый Соответствие);
		ПараметрыПисьма.Вставить("Кодировка", "utf-8");
		
		Для каждого Вложение Из Сообщение.Вложения Цикл
			НовоеВложение = Новый Структура("ДвоичныеДанные, Идентификатор");
			НовоеВложение.ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
			НовоеВложение.Идентификатор = Вложение.Идентификатор;
			ПараметрыПисьма.Вложения.Вставить(Вложение.Представление, НовоеВложение);
		КонецЦикла;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			МодульРаботаСПочтовымиСообщениямиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениямиСлужебный");
			Если Сообщение.ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
				ТипТекста = МодульРаботаСПочтовымиСообщениямиСлужебный.ТипТекстовЭлектронныхПисем("HTMLСКартинками");
			Иначе
				ТипТекста = МодульРаботаСПочтовымиСообщениямиСлужебный.ТипТекстовЭлектронныхПисем("ПростойТекст");
			КонецЕсли;
		Иначе
			ТипТекста = "";
		КонецЕсли;
		
		ПараметрыПисьма.Вставить("ТипТекста", ТипТекста);
		Кому = СформироватьСписокПолучателейСообщения(Сообщение.Получатель);
		
		ПараметрыПисьма.Вставить("Кому", Кому);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
			Если МодульРаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем() Тогда    				
				//УчетнаяЗапись = МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();   				// лебедев -  				
				Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
					
					МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
					Если МодульВзаимодействия.ИспользуетсяПочтовыйКлиент() Тогда
						
						//МодульВзаимодействия.СоздатьПисьмо(Сообщение, УчетнаяЗапись);                       	// лебедев -
						Результат.Письмо = СоздатьПисьмо(Сообщение, ПараметрыШаблона.УчетнаяЗапись);                             	// лебедев +
						Результат.Отправлено = Ложь;
						Возврат Результат;
						
					КонецЕсли;
					
				КонецЕсли;
				
				//МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);                    // лебедев -
				МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(ПараметрыШаблона.УчетнаяЗапись, ПараметрыПисьма);     // лебедев +
				Результат.Отправлено = Истина;
				
			Иначе   				
				Результат.ОписаниеОшибки  = НСтр("ru = 'Сообщение не может быть отправлено сразу.'");
				Возврат Результат; 				
			КонецЕсли;
		КонецЕсли;
		
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции    
Функция СоздатьПисьмо(Сообщение, УчетнаяЗапись) // модифицированная копия процедуры из общего модуля Взаимодействия
	
	ПисьмоHTML = (Сообщение.ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML);
	
	НачатьТранзакцию();
	Попытка
		
		Письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
		
		Письмо.Автор                    = Пользователи.ТекущийПользователь();
		Письмо.Ответственный            = Пользователи.ТекущийПользователь();
		Письмо.Дата                     = ТекущаяДатаСеанса();
		Письмо.Важность                 = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		Письмо.Кодировка                = КодировкаТекста.UTF8;
		Письмо.ОтправительПредставление = Строка(УчетнаяЗапись);
		
		Если ПисьмоHTML Тогда
			
			Письмо.ТекстHTML = Сообщение.Текст;
			Письмо.Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(Сообщение.Текст);
			
		Иначе
			
			Письмо.Текст = Сообщение.Текст;
			
		КонецЕсли;
		
		Письмо.Тема = Сообщение.Тема;
		Письмо.ТипТекста = ?(ПисьмоHTML, Перечисления.ТипыТекстовЭлектронныхПисем.HTML, Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
		Письмо.УчетнаяЗапись = УчетнаяЗапись;
		Письмо.ВзаимодействиеОснование = Неопределено;
		
		// Заполним реквизиты ВключатьТелоИсходногоПисьма, ОтображатьТелоИсходногоПисьма, УведомитьОДоставке и УведомитьОПрочтении.
		НастройкиПользователя = Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
		                           УчетнаяЗапись, Сообщение.ДополнительныеПараметры.ФорматПисьма, Истина);
		ЗаполнитьЗначенияСвойств(Письмо, НастройкиПользователя);
		
		Письмо.УдалятьПослеОтправки = Ложь;
		//Письмо.Комментарий = КомментарийПоНаименованиюШаблона(Сообщение.ДополнительныеПараметры.Наименование);                        											// лебедев -
		Письмо.Комментарий = НСтр("ru = 'Создано обработкой ""Рассылка счетов по дебиторской задолженности"" по шаблону'") + " " + Сообщение.ДополнительныеПараметры.Наименование; 	// лебедев +
		
		СписокПолучателейСпискомЗначений =( ТипЗнч(Сообщение.Получатель) = Тип("СписокЗначений"));
		Для Каждого ПолучательПисьма Из Сообщение.Получатель Цикл
			
			НоваяСтрока = Письмо["ПолучателиПисьма"].Добавить();
			
			Если СписокПолучателейСпискомЗначений Тогда
				НоваяСтрока.Адрес         = ПолучательПисьма.Значение;
				НоваяСтрока.Представление = ПолучательПисьма.Представление;
			Иначе
				НоваяСтрока.Адрес         = ПолучательПисьма.Адрес;
				НоваяСтрока.Представление = ПолучательПисьма.Представление;
				НоваяСтрока.Контакт       = ПолучательПисьма.ИсточникКонтактнойИнформации;
			КонецЕсли;
			
		КонецЦикла;
		
		Письмо.СписокПолучателейПисьма    = ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(Письмо.ПолучателиПисьма, Ложь);
		
		//Письмо.СтатусПисьма = ?(ОбщегоНазначения.ИнформационнаяБазаФайловая(),   			// лебедев -
		//	Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик,
		//	Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее);
		
		Письмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;   	// лебедев +
		
		Письмо.ЕстьВложения = (Сообщение.Вложения.Количество() > 0);
		РазмерВложений  = 0;
		РазмерыВложений = Новый Соответствие;
		Для Каждого Вложение Из Сообщение.Вложения Цикл
			
			Размер = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище).Размер() * 1.5;
			РазмерВложений = РазмерВложений + Размер;
			РазмерыВложений.Вставить(Вложение.АдресВоВременномХранилище, Размер);
			
			// Если у идентификатора не английские символы, то письмо может быть некорректно обработано.
			Если ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
				Идентификатор = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Вложение.Идентификатор);
				Письмо.ТекстHTML = СтрЗаменить(Письмо.ТекстHTML, "cid:" + Вложение.Идентификатор, "cid:" + Идентификатор);
				Вложение.Идентификатор = Идентификатор;
			КонецЕсли;
			
		КонецЦикла;
		
		Письмо.Размер = РазмерВложений + СтрДлина(Письмо.Тема) * 2
			+ ?(ПисьмоHTML, СтрДлина(Письмо.ТекстHTML), СтрДлина(Письмо.Текст)) * 2;
		
		Письмо.Записать();
		
		// Добавим вложения
		Для Каждого Вложение Из Сообщение.Вложения Цикл
			
			МодульУправлениеЭлектроннойПочтой = ОбщегоНазначения.ОбщийМодуль("УправлениеЭлектроннойПочтой");
			Если ПустаяСтрока(Вложение.Идентификатор) Тогда
				
				МодульУправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо.Ссылка,
					Вложение.АдресВоВременномХранилище, Вложение.Представление, РазмерыВложений[Вложение.АдресВоВременномХранилище]);
					
			ИначеЕсли ПисьмоHTML Тогда
				
				ПрисоединенныйФайл = МодульУправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо.Ссылка,
					Вложение.АдресВоВременномХранилище, Вложение.Представление, РазмерыВложений[Вложение.АдресВоВременномХранилище]);
				
				Если ПрисоединенныйФайл <> Неопределено Тогда
					ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
					ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.Идентификатор;
					ПрисоединенныйФайлОбъект.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// лебедев -
		//Если Сообщение.ДополнительныеПараметры.Свойство("Предмет") И ЗначениеЗаполнено(Сообщение.ДополнительныеПараметры.Предмет) Тогда
		//	Предмет = Сообщение.ДополнительныеПараметры.Предмет;
		//Иначе
		//	Предмет = Письмо.Ссылка;
		//КонецЕсли;
		//
		//Реквизиты = Взаимодействия.СтруктураРеквизитовВзаимодействияДляЗаписи(Предмет, Истина);         	
		//ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Письмо.Ссылка, Реквизиты);
		
		ЗафиксироватьТранзакцию();
		
		Возврат Письмо.Ссылка; // лебедев +
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось создать письмо : %Письмо% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Письмо%",  Письмо);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,, Письмо, ТекстСообщения);
			
		//Возврат; // лебедев -
		Возврат Неопределено; // лебедев +
		
	КонецПопытки;
		
	//Попытка
	//	ИдентификаторПисьма = ВыполнитьОтправкуПисьма(Письмо);
	//Исключение
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при отправке письма %1'"),КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	//	Возврат;
	//КонецПопытки;
	//
	//Если НЕ Письмо.УдалятьПослеОтправки Тогда
	//	
	//	Попытка
	//		Письмо.ИдентификаторСообщения = ИдентификаторПисьма;
	//		Письмо.СтатусПисьма           = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
	//		Письмо.ДатаОтправления        = ТекущаяДатаСеанса();
	//		Письмо.Записать(РежимЗаписиДокумента.Запись);
	//		
	//		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(
	//			Письмо.Ссылка, ОпределитьПапкуДляПисьма(Письмо.Ссылка));
	//	Исключение
	//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		                    НСтр("ru = 'Ошибка при записи письма после успешной отправки %1'"),
	//		                    КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	//	КонецПопытки;
	//	
	//Иначе
	//	
	//	Письмо.Прочитать();
	//	Письмо.Удалить();
	//	
	//КонецЕсли;
	
КонецФункции

Функция СформироватьСписокПолучателейСообщения(СписокПолучателей)  // копия процедуры из общего модуля ШаблоныСообщенийСлужебный
	
	СпискаПолучателейСКонтактом = (ТипЗнч(СписокПолучателей)= Тип("Массив"));
	
	Кому = Новый Массив;
	Для каждого Получатель Из СписокПолучателей Цикл
		ПолучательСообщения = Новый Структура();
		ПолучательСообщения.Вставить("Представление", Получатель.Представление);
		
		Если СпискаПолучателейСКонтактом Тогда
			ПолучательСообщения.Вставить("Адрес",   Получатель.Адрес);
			ПолучательСообщения.Вставить("Контакт", Получатель.ИсточникКонтактнойИнформации);
		Иначе
			ПолучательСообщения.Вставить("Адрес",   Получатель.Значение);
		КонецЕсли;
		
		Кому.Добавить(ПолучательСообщения);
	КонецЦикла;
	
	Возврат Кому;

КонецФункции
Процедура ДобавитьПрисоединенныеФайлыВоВложения(Знач ПараметрыОтправки, Знач Сообщение) // копия процедуры из общего модуля ШаблоныСообщенийСлужебный
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
		СписокПрисоединенныхФайлов = Новый Массив;
		МодульРаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ПараметрыОтправки.Шаблон, СписокПрисоединенныхФайлов);
		
		Для каждого ПрисоединенныйФайл Из СписокПрисоединенныхФайлов Цикл
			Если ПустаяСтрока(ПрисоединенныйФайл.ИДФайлаЭлектронногоПисьма) Тогда
				ОписаниеФайла = МодульРаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка, ПараметрыОтправки.УникальныйИдентификатор);
				Если Прав(ОписаниеФайла.ИмяФайла, 1) = "." Тогда
					ОписаниеФайлаИмяФайла = Лев(ОписаниеФайла.ИмяФайла, СтрДлина(ОписаниеФайла.ИмяФайла) - 1);
				Иначе
					ОписаниеФайлаИмяФайла = ОписаниеФайла.ИмяФайла;
				КонецЕсли;
				Сообщение.Вложения.Вставить(ОписаниеФайлаИмяФайла,  ОписаниеФайла.СсылкаНаДвоичныеДанныеФайла);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти



#Область Архив

#КонецОбласти

